
Atmega-Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001894  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  00001894  00001928  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000a0  008000a0  00001968  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001968  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000019c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  00001a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013db  00000000  00000000  00001a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006b2  00000000  00000000  00002e13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008dd  00000000  00000000  000034c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000070  00000000  00000000  00003da4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000425  00000000  00000000  00003e14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e8b  00000000  00000000  00004239  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001e0  00000000  00000000  000050c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 48 00 	jmp	0x90	; 0x90 <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

00000054 <__trampolines_end>:
      54:	4e 41       	sbci	r20, 0x1E	; 30
      56:	4e 49       	Address 0x00000056 is out of bounds.
.word	0xffff	; ????

00000057 <pstr_inity>:
      57:	49 4e 49 54 59                                      INITY

0000005c <pstr_inf>:
      5c:	49 4e 46                                            INF

0000005f <pwr_m10>:
      5f:	cd cc cc 3d 0a d7 23 3c 17 b7 d1 38 77 cc 2b 32     ...=..#<...8w.+2
      6f:	95 95 e6 24 1f b1 4f 0a                             ...$..O.

00000077 <pwr_p10>:
      77:	00 00 20 41 00 00 c8 42 00 40 1c 46 20 bc be 4c     .. A...B.@.F ..L
      87:	ca 1b 0e 5a ae c5 9d 74 00                          ...Z...t.

00000090 <__ctors_end>:
      90:	11 24       	eor	r1, r1
      92:	1f be       	out	0x3f, r1	; 63
      94:	cf e5       	ldi	r28, 0x5F	; 95
      96:	d8 e0       	ldi	r29, 0x08	; 8
      98:	de bf       	out	0x3e, r29	; 62
      9a:	cd bf       	out	0x3d, r28	; 61

0000009c <__do_copy_data>:
      9c:	10 e0       	ldi	r17, 0x00	; 0
      9e:	a0 e6       	ldi	r26, 0x60	; 96
      a0:	b0 e0       	ldi	r27, 0x00	; 0
      a2:	e4 e9       	ldi	r30, 0x94	; 148
      a4:	f8 e1       	ldi	r31, 0x18	; 24
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x10>
      a8:	05 90       	lpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a0 3a       	cpi	r26, 0xA0	; 160
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0xc>

000000b2 <__do_clear_bss>:
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	a0 ea       	ldi	r26, 0xA0	; 160
      b6:	b0 e0       	ldi	r27, 0x00	; 0
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a2 3a       	cpi	r26, 0xA2	; 162
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 93 00 	call	0x126	; 0x126 <main>
      c6:	0c 94 48 0c 	jmp	0x1890	; 0x1890 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <_Z7commandc>:
		data(*p);
		p++;
	}
}
void command(char a){
	PORTD = a;
      ce:	82 bb       	out	0x12, r24	; 18
	PORTC = 0x02;
      d0:	82 e0       	ldi	r24, 0x02	; 2
      d2:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      d4:	2f ef       	ldi	r18, 0xFF	; 255
      d6:	80 e7       	ldi	r24, 0x70	; 112
      d8:	92 e0       	ldi	r25, 0x02	; 2
      da:	21 50       	subi	r18, 0x01	; 1
      dc:	80 40       	sbci	r24, 0x00	; 0
      de:	90 40       	sbci	r25, 0x00	; 0
      e0:	e1 f7       	brne	.-8      	; 0xda <_Z7commandc+0xc>
      e2:	00 c0       	rjmp	.+0      	; 0xe4 <_Z7commandc+0x16>
      e4:	00 00       	nop
	_delay_ms(100);
	PORTC = 0x00;
      e6:	15 ba       	out	0x15, r1	; 21
      e8:	08 95       	ret

000000ea <_Z4datac>:
}

void data(char b){
	PORTD = b;
      ea:	82 bb       	out	0x12, r24	; 18
	PORTC = 0x03;
      ec:	83 e0       	ldi	r24, 0x03	; 3
      ee:	85 bb       	out	0x15, r24	; 21
      f0:	2f ef       	ldi	r18, 0xFF	; 255
      f2:	80 e7       	ldi	r24, 0x70	; 112
      f4:	92 e0       	ldi	r25, 0x02	; 2
      f6:	21 50       	subi	r18, 0x01	; 1
      f8:	80 40       	sbci	r24, 0x00	; 0
      fa:	90 40       	sbci	r25, 0x00	; 0
      fc:	e1 f7       	brne	.-8      	; 0xf6 <_Z4datac+0xc>
      fe:	00 c0       	rjmp	.+0      	; 0x100 <_Z4datac+0x16>
     100:	00 00       	nop
	_delay_ms(100);
	PORTC = 0x01;
     102:	81 e0       	ldi	r24, 0x01	; 1
     104:	85 bb       	out	0x15, r24	; 21
     106:	08 95       	ret

00000108 <_Z7displayPKc>:


void display(const char *p);
void command(char a);
void data(char b);
void display(const char *p){
     108:	cf 93       	push	r28
     10a:	df 93       	push	r29
     10c:	ec 01       	movw	r28, r24
	while(*p!='\0'){
     10e:	88 81       	ld	r24, Y
     110:	88 23       	and	r24, r24
     112:	31 f0       	breq	.+12     	; 0x120 <_Z7displayPKc+0x18>
     114:	21 96       	adiw	r28, 0x01	; 1
		data(*p);
     116:	0e 94 75 00 	call	0xea	; 0xea <_Z4datac>

void display(const char *p);
void command(char a);
void data(char b);
void display(const char *p){
	while(*p!='\0'){
     11a:	89 91       	ld	r24, Y+
     11c:	81 11       	cpse	r24, r1
     11e:	fb cf       	rjmp	.-10     	; 0x116 <_Z7displayPKc+0xe>
		data(*p);
		p++;
	}
}
     120:	df 91       	pop	r29
     122:	cf 91       	pop	r28
     124:	08 95       	ret

00000126 <main>:
	PORTC = 0x01;
}


int main(void)
{
     126:	cf 93       	push	r28
     128:	df 93       	push	r29
     12a:	cd b7       	in	r28, 0x3d	; 61
     12c:	de b7       	in	r29, 0x3e	; 62
     12e:	c0 54       	subi	r28, 0x40	; 64
     130:	d1 09       	sbc	r29, r1
     132:	0f b6       	in	r0, 0x3f	; 63
     134:	f8 94       	cli
     136:	de bf       	out	0x3e, r29	; 62
     138:	0f be       	out	0x3f, r0	; 63
     13a:	cd bf       	out	0x3d, r28	; 61
	
    DDRC = 0xFF;
     13c:	8f ef       	ldi	r24, 0xFF	; 255
     13e:	84 bb       	out	0x14, r24	; 20
	DDRD = 0xFF;//Taken as output in the case of pic it will change
     140:	81 bb       	out	0x11, r24	; 17
	DDRB = 0x0F;//TAKEN AS INPUT FOR MOTOR
     142:	8f e0       	ldi	r24, 0x0F	; 15
     144:	87 bb       	out	0x17, r24	; 23
	DDRA = 0x00;
     146:	1a ba       	out	0x1a, r1	; 26
	
	
	
	command(0x01);
     148:	81 e0       	ldi	r24, 0x01	; 1
     14a:	0e 94 67 00 	call	0xce	; 0xce <_Z7commandc>
	command(0x0E);
     14e:	8e e0       	ldi	r24, 0x0E	; 14
     150:	0e 94 67 00 	call	0xce	; 0xce <_Z7commandc>
	command(0x06);
     154:	86 e0       	ldi	r24, 0x06	; 6
     156:	0e 94 67 00 	call	0xce	; 0xce <_Z7commandc>
	command(0x38);
     15a:	88 e3       	ldi	r24, 0x38	; 56
     15c:	0e 94 67 00 	call	0xce	; 0xce <_Z7commandc>
	command(0x84);
     160:	84 e8       	ldi	r24, 0x84	; 132
     162:	0e 94 67 00 	call	0xce	; 0xce <_Z7commandc>
	display("ATMEGA");
     166:	80 e6       	ldi	r24, 0x60	; 96
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	0e 94 84 00 	call	0x108	; 0x108 <_Z7displayPKc>
	command(0xC3);
     16e:	83 ec       	ldi	r24, 0xC3	; 195
     170:	0e 94 67 00 	call	0xce	; 0xce <_Z7commandc>
	display("CACULATOR");
     174:	87 e6       	ldi	r24, 0x67	; 103
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	0e 94 84 00 	call	0x108	; 0x108 <_Z7displayPKc>
     17c:	2f ef       	ldi	r18, 0xFF	; 255
     17e:	33 ed       	ldi	r19, 0xD3	; 211
     180:	80 e3       	ldi	r24, 0x30	; 48
     182:	21 50       	subi	r18, 0x01	; 1
     184:	30 40       	sbci	r19, 0x00	; 0
     186:	80 40       	sbci	r24, 0x00	; 0
     188:	e1 f7       	brne	.-8      	; 0x182 <main+0x5c>
     18a:	00 c0       	rjmp	.+0      	; 0x18c <main+0x66>
     18c:	00 00       	nop
	_delay_ms(2000);
	command(0x01);
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	0e 94 67 00 	call	0xce	; 0xce <_Z7commandc>
	int minusof = 0;
	int plus = 0;
	int minus = 0;
	int mult = 0;
	int divs = 0;
	int flag = 0;
     194:	1e aa       	std	Y+54, r1	; 0x36
     196:	1d aa       	std	Y+53, r1	; 0x35
	int count = 0;		
	int minusof = 0;
	int plus = 0;
	int minus = 0;
	int mult = 0;
	int divs = 0;
     198:	1a ae       	std	Y+58, r1	; 0x3a
     19a:	19 ae       	std	Y+57, r1	; 0x39
	char get[20];
	int count = 0;		
	int minusof = 0;
	int plus = 0;
	int minus = 0;
	int mult = 0;
     19c:	21 2c       	mov	r2, r1
     19e:	31 2c       	mov	r3, r1
	char pass[20];
	char get[20];
	int count = 0;		
	int minusof = 0;
	int plus = 0;
	int minus = 0;
     1a0:	21 96       	adiw	r28, 0x01	; 1
     1a2:	1f ae       	std	Y+63, r1	; 0x3f
     1a4:	1e ae       	std	Y+62, r1	; 0x3e
     1a6:	21 97       	sbiw	r28, 0x01	; 1
	
	char pass[20];
	char get[20];
	int count = 0;		
	int minusof = 0;
	int plus = 0;
     1a8:	1e ae       	std	Y+62, r1	; 0x3e
     1aa:	1d ae       	std	Y+61, r1	; 0x3d
	
	
	char pass[20];
	char get[20];
	int count = 0;		
	int minusof = 0;
     1ac:	81 2c       	mov	r8, r1
     1ae:	91 2c       	mov	r9, r1
	command(0x01);
	
	
	char pass[20];
	char get[20];
	int count = 0;		
     1b0:	00 e0       	ldi	r16, 0x00	; 0
     1b2:	10 e0       	ldi	r17, 0x00	; 0
		    if((PINA&0x01) == 0){
				flag = 1;
				display("(-)");
				minusof++;
			}
			PORTB = 0x0E;
     1b4:	0f 2e       	mov	r0, r31
     1b6:	fe e0       	ldi	r31, 0x0E	; 14
     1b8:	7f 2e       	mov	r7, r31
     1ba:	f0 2d       	mov	r31, r0
			}else if((PINB&0x10) == 0){
				data('3');
				pass[count++] = '3';
				while((PINB&0x10)==0);
			}
			PORTB = 0x0D;
     1bc:	0f 2e       	mov	r0, r31
     1be:	fd e0       	ldi	r31, 0x0D	; 13
     1c0:	6f 2e       	mov	r6, r31
     1c2:	f0 2d       	mov	r31, r0
			}else if((PINB&0x10) == 0){
				data('7');
				pass[count++] = '7';
				while((PINB&0x10)==0);
			}
			PORTB = 0x0B;
     1c4:	0f 2e       	mov	r0, r31
     1c6:	fb e0       	ldi	r31, 0x0B	; 11
     1c8:	5f 2e       	mov	r5, r31
     1ca:	f0 2d       	mov	r31, r0
							}
							
						}
					 }
					  else if(flag == 1){
						  double div= atof(get);
     1cc:	5e 01       	movw	r10, r28
     1ce:	95 e1       	ldi	r25, 0x15	; 21
     1d0:	a9 0e       	add	r10, r25
     1d2:	b1 1c       	adc	r11, r1
							  }if(minusof == 2){
								  Result = (-div) / (-div1);
								  int scalingFactor = 100;  // for two decimal places
								  int ResultInt = (int)(Result * scalingFactor);

								  snprintf(resultString, 20, "%d.%02d", ResultInt / 100, ResultInt % 100);
     1d4:	9e 01       	movw	r18, r28
     1d6:	27 5d       	subi	r18, 0xD7	; 215
     1d8:	3f 4f       	sbci	r19, 0xFF	; 255
     1da:	3c ab       	std	Y+52, r19	; 0x34
     1dc:	2b ab       	std	Y+51, r18	; 0x33
				}
				count = 0;
				while((PINB&0x10)==0);
				command(0xC0);
			}
			PORTB = 0x07;
     1de:	0f 2e       	mov	r0, r31
     1e0:	f7 e0       	ldi	r31, 0x07	; 7
     1e2:	4f 2e       	mov	r4, r31
     1e4:	f0 2d       	mov	r31, r0
     1e6:	14 c0       	rjmp	.+40     	; 0x210 <main+0xea>
				}
				count = 0;
				while((PINB&0x40)==0);
				command(0xC0);
			}else if((PINB&0x20) == 0){
				minusof = 0;
     1e8:	81 2c       	mov	r8, r1
     1ea:	91 2c       	mov	r9, r1
				command(0x01);
				display("CLEARING");
				_delay_ms(500);
				command(0x01);
				count = 0;
     1ec:	00 e0       	ldi	r16, 0x00	; 0
     1ee:	10 e0       	ldi	r17, 0x00	; 0
     1f0:	0f c0       	rjmp	.+30     	; 0x210 <main+0xea>
     1f2:	31 e0       	ldi	r19, 0x01	; 1
     1f4:	39 af       	std	Y+57, r19	; 0x39
     1f6:	1a ae       	std	Y+58, r1	; 0x3a
     1f8:	0b c0       	rjmp	.+22     	; 0x210 <main+0xea>
     1fa:	81 e0       	ldi	r24, 0x01	; 1
     1fc:	8d ab       	std	Y+53, r24	; 0x35
     1fe:	1e aa       	std	Y+54, r1	; 0x36
     200:	89 af       	std	Y+57, r24	; 0x39
     202:	1a ae       	std	Y+58, r1	; 0x3a
     204:	05 c0       	rjmp	.+10     	; 0x210 <main+0xea>
     206:	91 e0       	ldi	r25, 0x01	; 1
     208:	9d ab       	std	Y+53, r25	; 0x35
     20a:	1e aa       	std	Y+54, r1	; 0x36
     20c:	99 af       	std	Y+57, r25	; 0x39
     20e:	1a ae       	std	Y+58, r1	; 0x3a
	int divs = 0;
	int flag = 0;
	char resultString[10];
    while (1) 
    {
		    if((PINA&0x01) == 0){
     210:	c8 99       	sbic	0x19, 0	; 25
     212:	0a c0       	rjmp	.+20     	; 0x228 <main+0x102>
				flag = 1;
				display("(-)");
     214:	81 e7       	ldi	r24, 0x71	; 113
     216:	90 e0       	ldi	r25, 0x00	; 0
     218:	0e 94 84 00 	call	0x108	; 0x108 <_Z7displayPKc>
				minusof++;
     21c:	2f ef       	ldi	r18, 0xFF	; 255
     21e:	82 1a       	sub	r8, r18
     220:	92 0a       	sbc	r9, r18
	int flag = 0;
	char resultString[10];
    while (1) 
    {
		    if((PINA&0x01) == 0){
				flag = 1;
     222:	31 e0       	ldi	r19, 0x01	; 1
     224:	3d ab       	std	Y+53, r19	; 0x35
     226:	1e aa       	std	Y+54, r1	; 0x36
				display("(-)");
				minusof++;
			}
			PORTB = 0x0E;
     228:	78 ba       	out	0x18, r7	; 24
			if((PINB&0x80) == 0){
     22a:	b7 99       	sbic	0x16, 7	; 22
     22c:	12 c0       	rjmp	.+36     	; 0x252 <main+0x12c>
				data('0');
     22e:	80 e3       	ldi	r24, 0x30	; 48
     230:	0e 94 75 00 	call	0xea	; 0xea <_Z4datac>
				pass[count++] = '0';
     234:	78 01       	movw	r14, r16
     236:	8f ef       	ldi	r24, 0xFF	; 255
     238:	e8 1a       	sub	r14, r24
     23a:	f8 0a       	sbc	r15, r24
     23c:	e1 e0       	ldi	r30, 0x01	; 1
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	ec 0f       	add	r30, r28
     242:	fd 1f       	adc	r31, r29
     244:	e0 0f       	add	r30, r16
     246:	f1 1f       	adc	r31, r17
     248:	80 e3       	ldi	r24, 0x30	; 48
     24a:	80 83       	st	Z, r24
				while((PINB&0x80)==0);
     24c:	b7 9b       	sbis	0x16, 7	; 22
     24e:	fe cf       	rjmp	.-4      	; 0x24c <main+0x126>
     250:	3d c0       	rjmp	.+122    	; 0x2cc <main+0x1a6>
			}else if((PINB&0x40) == 0){
     252:	b6 99       	sbic	0x16, 6	; 22
     254:	12 c0       	rjmp	.+36     	; 0x27a <main+0x154>
				data('1');
     256:	81 e3       	ldi	r24, 0x31	; 49
     258:	0e 94 75 00 	call	0xea	; 0xea <_Z4datac>
				pass[count++] = '1';
     25c:	78 01       	movw	r14, r16
     25e:	9f ef       	ldi	r25, 0xFF	; 255
     260:	e9 1a       	sub	r14, r25
     262:	f9 0a       	sbc	r15, r25
     264:	e1 e0       	ldi	r30, 0x01	; 1
     266:	f0 e0       	ldi	r31, 0x00	; 0
     268:	ec 0f       	add	r30, r28
     26a:	fd 1f       	adc	r31, r29
     26c:	e0 0f       	add	r30, r16
     26e:	f1 1f       	adc	r31, r17
     270:	81 e3       	ldi	r24, 0x31	; 49
     272:	80 83       	st	Z, r24
				while((PINB&0x40)==0);
     274:	b6 9b       	sbis	0x16, 6	; 22
     276:	fe cf       	rjmp	.-4      	; 0x274 <main+0x14e>
     278:	29 c0       	rjmp	.+82     	; 0x2cc <main+0x1a6>
			}else if((PINB&0x20) == 0){
     27a:	b5 99       	sbic	0x16, 5	; 22
     27c:	12 c0       	rjmp	.+36     	; 0x2a2 <main+0x17c>
				data('2');
     27e:	82 e3       	ldi	r24, 0x32	; 50
     280:	0e 94 75 00 	call	0xea	; 0xea <_Z4datac>
				pass[count++] = '2';
     284:	78 01       	movw	r14, r16
     286:	2f ef       	ldi	r18, 0xFF	; 255
     288:	e2 1a       	sub	r14, r18
     28a:	f2 0a       	sbc	r15, r18
     28c:	e1 e0       	ldi	r30, 0x01	; 1
     28e:	f0 e0       	ldi	r31, 0x00	; 0
     290:	ec 0f       	add	r30, r28
     292:	fd 1f       	adc	r31, r29
     294:	e0 0f       	add	r30, r16
     296:	f1 1f       	adc	r31, r17
     298:	82 e3       	ldi	r24, 0x32	; 50
     29a:	80 83       	st	Z, r24
				while((PINB&0x20)==0);
     29c:	b5 9b       	sbis	0x16, 5	; 22
     29e:	fe cf       	rjmp	.-4      	; 0x29c <main+0x176>
     2a0:	15 c0       	rjmp	.+42     	; 0x2cc <main+0x1a6>
			}else if((PINB&0x10) == 0){
     2a2:	b4 99       	sbic	0x16, 4	; 22
     2a4:	12 c0       	rjmp	.+36     	; 0x2ca <main+0x1a4>
				data('3');
     2a6:	83 e3       	ldi	r24, 0x33	; 51
     2a8:	0e 94 75 00 	call	0xea	; 0xea <_Z4datac>
				pass[count++] = '3';
     2ac:	78 01       	movw	r14, r16
     2ae:	3f ef       	ldi	r19, 0xFF	; 255
     2b0:	e3 1a       	sub	r14, r19
     2b2:	f3 0a       	sbc	r15, r19
     2b4:	e1 e0       	ldi	r30, 0x01	; 1
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	ec 0f       	add	r30, r28
     2ba:	fd 1f       	adc	r31, r29
     2bc:	e0 0f       	add	r30, r16
     2be:	f1 1f       	adc	r31, r17
     2c0:	83 e3       	ldi	r24, 0x33	; 51
     2c2:	80 83       	st	Z, r24
				while((PINB&0x10)==0);
     2c4:	b4 9b       	sbis	0x16, 4	; 22
     2c6:	fe cf       	rjmp	.-4      	; 0x2c4 <main+0x19e>
     2c8:	01 c0       	rjmp	.+2      	; 0x2cc <main+0x1a6>
     2ca:	78 01       	movw	r14, r16
			}
			PORTB = 0x0D;
     2cc:	68 ba       	out	0x18, r6	; 24
			if((PINB&0x80) == 0){
     2ce:	b7 99       	sbic	0x16, 7	; 22
     2d0:	12 c0       	rjmp	.+36     	; 0x2f6 <main+0x1d0>
				data('4');
     2d2:	84 e3       	ldi	r24, 0x34	; 52
     2d4:	0e 94 75 00 	call	0xea	; 0xea <_Z4datac>
				pass[count++] = '4';
     2d8:	67 01       	movw	r12, r14
     2da:	8f ef       	ldi	r24, 0xFF	; 255
     2dc:	c8 1a       	sub	r12, r24
     2de:	d8 0a       	sbc	r13, r24
     2e0:	e1 e0       	ldi	r30, 0x01	; 1
     2e2:	f0 e0       	ldi	r31, 0x00	; 0
     2e4:	ec 0f       	add	r30, r28
     2e6:	fd 1f       	adc	r31, r29
     2e8:	ee 0d       	add	r30, r14
     2ea:	ff 1d       	adc	r31, r15
     2ec:	84 e3       	ldi	r24, 0x34	; 52
     2ee:	80 83       	st	Z, r24
				while((PINB&0x80)==0);
     2f0:	b7 9b       	sbis	0x16, 7	; 22
     2f2:	fe cf       	rjmp	.-4      	; 0x2f0 <main+0x1ca>
     2f4:	3d c0       	rjmp	.+122    	; 0x370 <main+0x24a>
			}else if((PINB&0x40) == 0){
     2f6:	b6 99       	sbic	0x16, 6	; 22
     2f8:	12 c0       	rjmp	.+36     	; 0x31e <main+0x1f8>
				data('5');
     2fa:	85 e3       	ldi	r24, 0x35	; 53
     2fc:	0e 94 75 00 	call	0xea	; 0xea <_Z4datac>
				pass[count++] = '5';
     300:	67 01       	movw	r12, r14
     302:	9f ef       	ldi	r25, 0xFF	; 255
     304:	c9 1a       	sub	r12, r25
     306:	d9 0a       	sbc	r13, r25
     308:	e1 e0       	ldi	r30, 0x01	; 1
     30a:	f0 e0       	ldi	r31, 0x00	; 0
     30c:	ec 0f       	add	r30, r28
     30e:	fd 1f       	adc	r31, r29
     310:	ee 0d       	add	r30, r14
     312:	ff 1d       	adc	r31, r15
     314:	85 e3       	ldi	r24, 0x35	; 53
     316:	80 83       	st	Z, r24
				while((PINB&0x40)==0);
     318:	b6 9b       	sbis	0x16, 6	; 22
     31a:	fe cf       	rjmp	.-4      	; 0x318 <main+0x1f2>
     31c:	29 c0       	rjmp	.+82     	; 0x370 <main+0x24a>
			}else if((PINB&0x20) == 0){
     31e:	b5 99       	sbic	0x16, 5	; 22
     320:	12 c0       	rjmp	.+36     	; 0x346 <main+0x220>
				data('6');
     322:	86 e3       	ldi	r24, 0x36	; 54
     324:	0e 94 75 00 	call	0xea	; 0xea <_Z4datac>
				pass[count++] = '6';
     328:	67 01       	movw	r12, r14
     32a:	2f ef       	ldi	r18, 0xFF	; 255
     32c:	c2 1a       	sub	r12, r18
     32e:	d2 0a       	sbc	r13, r18
     330:	e1 e0       	ldi	r30, 0x01	; 1
     332:	f0 e0       	ldi	r31, 0x00	; 0
     334:	ec 0f       	add	r30, r28
     336:	fd 1f       	adc	r31, r29
     338:	ee 0d       	add	r30, r14
     33a:	ff 1d       	adc	r31, r15
     33c:	86 e3       	ldi	r24, 0x36	; 54
     33e:	80 83       	st	Z, r24
				while((PINB&0x20)==0);
     340:	b5 9b       	sbis	0x16, 5	; 22
     342:	fe cf       	rjmp	.-4      	; 0x340 <main+0x21a>
     344:	15 c0       	rjmp	.+42     	; 0x370 <main+0x24a>
			}else if((PINB&0x10) == 0){
     346:	b4 99       	sbic	0x16, 4	; 22
     348:	12 c0       	rjmp	.+36     	; 0x36e <main+0x248>
				data('7');
     34a:	87 e3       	ldi	r24, 0x37	; 55
     34c:	0e 94 75 00 	call	0xea	; 0xea <_Z4datac>
				pass[count++] = '7';
     350:	67 01       	movw	r12, r14
     352:	3f ef       	ldi	r19, 0xFF	; 255
     354:	c3 1a       	sub	r12, r19
     356:	d3 0a       	sbc	r13, r19
     358:	e1 e0       	ldi	r30, 0x01	; 1
     35a:	f0 e0       	ldi	r31, 0x00	; 0
     35c:	ec 0f       	add	r30, r28
     35e:	fd 1f       	adc	r31, r29
     360:	ee 0d       	add	r30, r14
     362:	ff 1d       	adc	r31, r15
     364:	87 e3       	ldi	r24, 0x37	; 55
     366:	80 83       	st	Z, r24
				while((PINB&0x10)==0);
     368:	b4 9b       	sbis	0x16, 4	; 22
     36a:	fe cf       	rjmp	.-4      	; 0x368 <main+0x242>
     36c:	01 c0       	rjmp	.+2      	; 0x370 <main+0x24a>
     36e:	67 01       	movw	r12, r14
			}
			PORTB = 0x0B;
     370:	58 ba       	out	0x18, r5	; 24
			if((PINB&0x80) == 0){
     372:	b7 99       	sbic	0x16, 7	; 22
     374:	11 c0       	rjmp	.+34     	; 0x398 <main+0x272>
				data('8');
     376:	88 e3       	ldi	r24, 0x38	; 56
     378:	0e 94 75 00 	call	0xea	; 0xea <_Z4datac>
				pass[count++] = '8';
     37c:	86 01       	movw	r16, r12
     37e:	0f 5f       	subi	r16, 0xFF	; 255
     380:	1f 4f       	sbci	r17, 0xFF	; 255
     382:	e1 e0       	ldi	r30, 0x01	; 1
     384:	f0 e0       	ldi	r31, 0x00	; 0
     386:	ec 0f       	add	r30, r28
     388:	fd 1f       	adc	r31, r29
     38a:	ec 0d       	add	r30, r12
     38c:	fd 1d       	adc	r31, r13
     38e:	88 e3       	ldi	r24, 0x38	; 56
     390:	80 83       	st	Z, r24
				while((PINB&0x80)==0);
     392:	b7 9b       	sbis	0x16, 7	; 22
     394:	fe cf       	rjmp	.-4      	; 0x392 <main+0x26c>
     396:	78 c0       	rjmp	.+240    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
			}else if((PINB&0x40) == 0){
     398:	b6 99       	sbic	0x16, 6	; 22
     39a:	11 c0       	rjmp	.+34     	; 0x3be <main+0x298>
				data('9');
     39c:	89 e3       	ldi	r24, 0x39	; 57
     39e:	0e 94 75 00 	call	0xea	; 0xea <_Z4datac>
				pass[count++] = '9';
     3a2:	86 01       	movw	r16, r12
     3a4:	0f 5f       	subi	r16, 0xFF	; 255
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	e1 e0       	ldi	r30, 0x01	; 1
     3aa:	f0 e0       	ldi	r31, 0x00	; 0
     3ac:	ec 0f       	add	r30, r28
     3ae:	fd 1f       	adc	r31, r29
     3b0:	ec 0d       	add	r30, r12
     3b2:	fd 1d       	adc	r31, r13
     3b4:	89 e3       	ldi	r24, 0x39	; 57
     3b6:	80 83       	st	Z, r24
				while((PINB&0x40)==0);
     3b8:	b6 9b       	sbis	0x16, 6	; 22
     3ba:	fe cf       	rjmp	.-4      	; 0x3b8 <main+0x292>
     3bc:	65 c0       	rjmp	.+202    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
			}else if((PINB&0x20) == 0){
     3be:	b5 99       	sbic	0x16, 5	; 22
     3c0:	2f c0       	rjmp	.+94     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
				command(0x8F);
     3c2:	8f e8       	ldi	r24, 0x8F	; 143
     3c4:	0e 94 67 00 	call	0xce	; 0xce <_Z7commandc>
				plus =  1;
				data('+');
     3c8:	8b e2       	ldi	r24, 0x2B	; 43
     3ca:	0e 94 75 00 	call	0xea	; 0xea <_Z4datac>
				for(int i = 0;i<count + 1;i++){
     3ce:	c6 01       	movw	r24, r12
     3d0:	01 96       	adiw	r24, 0x01	; 1
     3d2:	18 16       	cp	r1, r24
     3d4:	19 06       	cpc	r1, r25
     3d6:	24 f0       	brlt	.+8      	; 0x3e0 <main+0x2ba>
					get[i] = pass[i];
				}
				   
				for(int i = 0;i<count;i++){
     3d8:	1c 14       	cp	r1, r12
     3da:	1d 04       	cpc	r1, r13
     3dc:	84 f0       	brlt	.+32     	; 0x3fe <main+0x2d8>
     3de:	17 c0       	rjmp	.+46     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     3e0:	fe 01       	movw	r30, r28
     3e2:	31 96       	adiw	r30, 0x01	; 1
     3e4:	de 01       	movw	r26, r28
     3e6:	55 96       	adiw	r26, 0x15	; 21
     3e8:	96 01       	movw	r18, r12
     3ea:	2f 5f       	subi	r18, 0xFF	; 255
     3ec:	3f 4f       	sbci	r19, 0xFF	; 255
     3ee:	2e 0f       	add	r18, r30
     3f0:	3f 1f       	adc	r19, r31
			}else if((PINB&0x20) == 0){
				command(0x8F);
				plus =  1;
				data('+');
				for(int i = 0;i<count + 1;i++){
					get[i] = pass[i];
     3f2:	81 91       	ld	r24, Z+
     3f4:	8d 93       	st	X+, r24
				while((PINB&0x40)==0);
			}else if((PINB&0x20) == 0){
				command(0x8F);
				plus =  1;
				data('+');
				for(int i = 0;i<count + 1;i++){
     3f6:	e2 17       	cp	r30, r18
     3f8:	f3 07       	cpc	r31, r19
     3fa:	d9 f7       	brne	.-10     	; 0x3f2 <main+0x2cc>
     3fc:	ed cf       	rjmp	.-38     	; 0x3d8 <main+0x2b2>
     3fe:	fe 01       	movw	r30, r28
     400:	31 96       	adiw	r30, 0x01	; 1
     402:	ce 0e       	add	r12, r30
     404:	df 1e       	adc	r13, r31
					get[i] = pass[i];
				}
				   
				for(int i = 0;i<count;i++){
					pass[i] = 0;
     406:	11 92       	st	Z+, r1
				data('+');
				for(int i = 0;i<count + 1;i++){
					get[i] = pass[i];
				}
				   
				for(int i = 0;i<count;i++){
     408:	ec 15       	cp	r30, r12
     40a:	fd 05       	cpc	r31, r13
     40c:	e1 f7       	brne	.-8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
					pass[i] = 0;
				}
				count = 0;
				while((PINB&0x20)==0);
     40e:	b5 9b       	sbis	0x16, 5	; 22
     410:	fe cf       	rjmp	.-4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
				command(0xC0);
     412:	80 ec       	ldi	r24, 0xC0	; 192
     414:	0e 94 67 00 	call	0xce	; 0xce <_Z7commandc>
				data('9');
				pass[count++] = '9';
				while((PINB&0x40)==0);
			}else if((PINB&0x20) == 0){
				command(0x8F);
				plus =  1;
     418:	81 e0       	ldi	r24, 0x01	; 1
     41a:	8d af       	std	Y+61, r24	; 0x3d
     41c:	1e ae       	std	Y+62, r1	; 0x3e
     41e:	48 c3       	rjmp	.+1680   	; 0xab0 <__stack+0x251>
					pass[i] = 0;
				}
				count = 0;
				while((PINB&0x20)==0);
				command(0xC0);
			}else if((PINB&0x10) == 0){
     420:	b4 99       	sbic	0x16, 4	; 22
     422:	31 c0       	rjmp	.+98     	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
				command(0x8F);
     424:	8f e8       	ldi	r24, 0x8F	; 143
     426:	0e 94 67 00 	call	0xce	; 0xce <_Z7commandc>
				minus = 1;
				data('-');
     42a:	8d e2       	ldi	r24, 0x2D	; 45
     42c:	0e 94 75 00 	call	0xea	; 0xea <_Z4datac>
				for(int i = 0;i<count + 1;i++){
     430:	c6 01       	movw	r24, r12
     432:	01 96       	adiw	r24, 0x01	; 1
     434:	18 16       	cp	r1, r24
     436:	19 06       	cpc	r1, r25
     438:	24 f0       	brlt	.+8      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
					get[i] = pass[i];
				}
				
				for(int i = 0;i<count;i++){
     43a:	1c 14       	cp	r1, r12
     43c:	1d 04       	cpc	r1, r13
     43e:	84 f0       	brlt	.+32     	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     440:	17 c0       	rjmp	.+46     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     442:	fe 01       	movw	r30, r28
     444:	31 96       	adiw	r30, 0x01	; 1
     446:	de 01       	movw	r26, r28
     448:	55 96       	adiw	r26, 0x15	; 21
     44a:	96 01       	movw	r18, r12
     44c:	2f 5f       	subi	r18, 0xFF	; 255
     44e:	3f 4f       	sbci	r19, 0xFF	; 255
     450:	2e 0f       	add	r18, r30
     452:	3f 1f       	adc	r19, r31
			}else if((PINB&0x10) == 0){
				command(0x8F);
				minus = 1;
				data('-');
				for(int i = 0;i<count + 1;i++){
					get[i] = pass[i];
     454:	81 91       	ld	r24, Z+
     456:	8d 93       	st	X+, r24
				command(0xC0);
			}else if((PINB&0x10) == 0){
				command(0x8F);
				minus = 1;
				data('-');
				for(int i = 0;i<count + 1;i++){
     458:	e2 17       	cp	r30, r18
     45a:	f3 07       	cpc	r31, r19
     45c:	d9 f7       	brne	.-10     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     45e:	ed cf       	rjmp	.-38     	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     460:	fe 01       	movw	r30, r28
     462:	31 96       	adiw	r30, 0x01	; 1
     464:	ce 0e       	add	r12, r30
     466:	df 1e       	adc	r13, r31
					get[i] = pass[i];
				}
				
				for(int i = 0;i<count;i++){
					pass[i] = 0;
     468:	11 92       	st	Z+, r1
				data('-');
				for(int i = 0;i<count + 1;i++){
					get[i] = pass[i];
				}
				
				for(int i = 0;i<count;i++){
     46a:	ec 15       	cp	r30, r12
     46c:	fd 05       	cpc	r31, r13
     46e:	e1 f7       	brne	.-8      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
					pass[i] = 0;
				}
				count = 0;
				while((PINB&0x10)==0);
     470:	b4 9b       	sbis	0x16, 4	; 22
     472:	fe cf       	rjmp	.-4      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
				command(0xC0);
     474:	80 ec       	ldi	r24, 0xC0	; 192
     476:	0e 94 67 00 	call	0xce	; 0xce <_Z7commandc>
				count = 0;
				while((PINB&0x20)==0);
				command(0xC0);
			}else if((PINB&0x10) == 0){
				command(0x8F);
				minus = 1;
     47a:	91 e0       	ldi	r25, 0x01	; 1
     47c:	9f af       	std	Y+63, r25	; 0x3f
     47e:	21 96       	adiw	r28, 0x01	; 1
     480:	1f ae       	std	Y+63, r1	; 0x3f
     482:	21 97       	sbiw	r28, 0x01	; 1
     484:	15 c3       	rjmp	.+1578   	; 0xab0 <__stack+0x251>
     486:	86 01       	movw	r16, r12
				}
				count = 0;
				while((PINB&0x10)==0);
				command(0xC0);
			}
			PORTB = 0x07;
     488:	48 ba       	out	0x18, r4	; 24
			if((PINB&0x80) == 0){
     48a:	b7 99       	sbic	0x16, 7	; 22
     48c:	30 c0       	rjmp	.+96     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
				command(0x8F);
     48e:	8f e8       	ldi	r24, 0x8F	; 143
     490:	0e 94 67 00 	call	0xce	; 0xce <_Z7commandc>
				mult = 1;
				data('X');
     494:	88 e5       	ldi	r24, 0x58	; 88
     496:	0e 94 75 00 	call	0xea	; 0xea <_Z4datac>
				for(int i = 0;i<count + 1;i++){
     49a:	a8 01       	movw	r20, r16
     49c:	4f 5f       	subi	r20, 0xFF	; 255
     49e:	5f 4f       	sbci	r21, 0xFF	; 255
     4a0:	14 16       	cp	r1, r20
     4a2:	15 06       	cpc	r1, r21
     4a4:	24 f0       	brlt	.+8      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
					get[i] = pass[i];
				}
				
				for(int i = 0;i<count;i++){
     4a6:	10 16       	cp	r1, r16
     4a8:	11 06       	cpc	r1, r17
     4aa:	74 f0       	brlt	.+28     	; 0x4c8 <__LOCK_REGION_LENGTH__+0xc8>
     4ac:	15 c0       	rjmp	.+42     	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
     4ae:	de 01       	movw	r26, r28
     4b0:	11 96       	adiw	r26, 0x01	; 1
     4b2:	fe 01       	movw	r30, r28
     4b4:	75 96       	adiw	r30, 0x15	; 21
			}
			PORTB = 0x07;
			if((PINB&0x80) == 0){
				command(0x8F);
				mult = 1;
				data('X');
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	90 e0       	ldi	r25, 0x00	; 0
				for(int i = 0;i<count + 1;i++){
					get[i] = pass[i];
     4ba:	2d 91       	ld	r18, X+
     4bc:	21 93       	st	Z+, r18
			PORTB = 0x07;
			if((PINB&0x80) == 0){
				command(0x8F);
				mult = 1;
				data('X');
				for(int i = 0;i<count + 1;i++){
     4be:	01 96       	adiw	r24, 0x01	; 1
     4c0:	84 17       	cp	r24, r20
     4c2:	95 07       	cpc	r25, r21
     4c4:	d4 f3       	brlt	.-12     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     4c6:	ef cf       	rjmp	.-34     	; 0x4a6 <__LOCK_REGION_LENGTH__+0xa6>
     4c8:	fe 01       	movw	r30, r28
     4ca:	31 96       	adiw	r30, 0x01	; 1
     4cc:	0e 0f       	add	r16, r30
     4ce:	1f 1f       	adc	r17, r31
					get[i] = pass[i];
				}
				
				for(int i = 0;i<count;i++){
					pass[i] = 0;
     4d0:	11 92       	st	Z+, r1
				data('X');
				for(int i = 0;i<count + 1;i++){
					get[i] = pass[i];
				}
				
				for(int i = 0;i<count;i++){
     4d2:	e0 17       	cp	r30, r16
     4d4:	f1 07       	cpc	r31, r17
     4d6:	e1 f7       	brne	.-8      	; 0x4d0 <__LOCK_REGION_LENGTH__+0xd0>
					pass[i] = 0;
				}
				count = 0;
				while((PINB&0x80)==0);
     4d8:	b7 9b       	sbis	0x16, 7	; 22
     4da:	fe cf       	rjmp	.-4      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
				command(0xC0);
     4dc:	80 ec       	ldi	r24, 0xC0	; 192
     4de:	0e 94 67 00 	call	0xce	; 0xce <_Z7commandc>
				command(0xC0);
			}
			PORTB = 0x07;
			if((PINB&0x80) == 0){
				command(0x8F);
				mult = 1;
     4e2:	22 24       	eor	r2, r2
     4e4:	23 94       	inc	r2
     4e6:	31 2c       	mov	r3, r1
				}
				
				for(int i = 0;i<count;i++){
					pass[i] = 0;
				}
				count = 0;
     4e8:	00 e0       	ldi	r16, 0x00	; 0
     4ea:	10 e0       	ldi	r17, 0x00	; 0
     4ec:	91 ce       	rjmp	.-734    	; 0x210 <main+0xea>
				while((PINB&0x80)==0);
				command(0xC0);
			}else if((PINB&0x40) == 0){
     4ee:	b6 99       	sbic	0x16, 6	; 22
     4f0:	31 c0       	rjmp	.+98     	; 0x554 <__LOCK_REGION_LENGTH__+0x154>
				command(0x8F);
     4f2:	8f e8       	ldi	r24, 0x8F	; 143
     4f4:	0e 94 67 00 	call	0xce	; 0xce <_Z7commandc>
				divs = 1;
				data('/');
     4f8:	8f e2       	ldi	r24, 0x2F	; 47
     4fa:	0e 94 75 00 	call	0xea	; 0xea <_Z4datac>
				for(int i = 0;i<count + 1;i++){
     4fe:	c8 01       	movw	r24, r16
     500:	01 96       	adiw	r24, 0x01	; 1
     502:	18 16       	cp	r1, r24
     504:	19 06       	cpc	r1, r25
     506:	24 f0       	brlt	.+8      	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
					get[i] = pass[i];
				}
				
				for(int i = 0;i<count;i++){
     508:	10 16       	cp	r1, r16
     50a:	11 06       	cpc	r1, r17
     50c:	84 f0       	brlt	.+32     	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
     50e:	17 c0       	rjmp	.+46     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
     510:	fe 01       	movw	r30, r28
     512:	31 96       	adiw	r30, 0x01	; 1
     514:	de 01       	movw	r26, r28
     516:	55 96       	adiw	r26, 0x15	; 21
     518:	98 01       	movw	r18, r16
     51a:	2f 5f       	subi	r18, 0xFF	; 255
     51c:	3f 4f       	sbci	r19, 0xFF	; 255
     51e:	2e 0f       	add	r18, r30
     520:	3f 1f       	adc	r19, r31
			}else if((PINB&0x40) == 0){
				command(0x8F);
				divs = 1;
				data('/');
				for(int i = 0;i<count + 1;i++){
					get[i] = pass[i];
     522:	81 91       	ld	r24, Z+
     524:	8d 93       	st	X+, r24
				command(0xC0);
			}else if((PINB&0x40) == 0){
				command(0x8F);
				divs = 1;
				data('/');
				for(int i = 0;i<count + 1;i++){
     526:	e2 17       	cp	r30, r18
     528:	f3 07       	cpc	r31, r19
     52a:	d9 f7       	brne	.-10     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
     52c:	ed cf       	rjmp	.-38     	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
     52e:	fe 01       	movw	r30, r28
     530:	31 96       	adiw	r30, 0x01	; 1
     532:	0e 0f       	add	r16, r30
     534:	1f 1f       	adc	r17, r31
					get[i] = pass[i];
				}
				
				for(int i = 0;i<count;i++){
					pass[i] = 0;
     536:	11 92       	st	Z+, r1
				data('/');
				for(int i = 0;i<count + 1;i++){
					get[i] = pass[i];
				}
				
				for(int i = 0;i<count;i++){
     538:	e0 17       	cp	r30, r16
     53a:	f1 07       	cpc	r31, r17
     53c:	e1 f7       	brne	.-8      	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
					pass[i] = 0;
				}
				count = 0;
				while((PINB&0x40)==0);
     53e:	b6 9b       	sbis	0x16, 6	; 22
     540:	fe cf       	rjmp	.-4      	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
				command(0xC0);
     542:	80 ec       	ldi	r24, 0xC0	; 192
     544:	0e 94 67 00 	call	0xce	; 0xce <_Z7commandc>
				count = 0;
				while((PINB&0x80)==0);
				command(0xC0);
			}else if((PINB&0x40) == 0){
				command(0x8F);
				divs = 1;
     548:	21 e0       	ldi	r18, 0x01	; 1
     54a:	29 af       	std	Y+57, r18	; 0x39
     54c:	1a ae       	std	Y+58, r1	; 0x3a
				}
				
				for(int i = 0;i<count;i++){
					pass[i] = 0;
				}
				count = 0;
     54e:	00 e0       	ldi	r16, 0x00	; 0
     550:	10 e0       	ldi	r17, 0x00	; 0
     552:	5e ce       	rjmp	.-836    	; 0x210 <main+0xea>
				while((PINB&0x40)==0);
				command(0xC0);
			}else if((PINB&0x20) == 0){
     554:	b5 99       	sbic	0x16, 5	; 22
     556:	1a c0       	rjmp	.+52     	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
				minusof = 0;
				command(0x01);
     558:	81 e0       	ldi	r24, 0x01	; 1
     55a:	0e 94 67 00 	call	0xce	; 0xce <_Z7commandc>
				display("CLEARING");
     55e:	85 e7       	ldi	r24, 0x75	; 117
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	0e 94 84 00 	call	0x108	; 0x108 <_Z7displayPKc>
     566:	3f ef       	ldi	r19, 0xFF	; 255
     568:	84 e3       	ldi	r24, 0x34	; 52
     56a:	9c e0       	ldi	r25, 0x0C	; 12
     56c:	31 50       	subi	r19, 0x01	; 1
     56e:	80 40       	sbci	r24, 0x00	; 0
     570:	90 40       	sbci	r25, 0x00	; 0
     572:	e1 f7       	brne	.-8      	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
     574:	00 c0       	rjmp	.+0      	; 0x576 <__LOCK_REGION_LENGTH__+0x176>
     576:	00 00       	nop
				_delay_ms(500);
				command(0x01);
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	0e 94 67 00 	call	0xce	; 0xce <_Z7commandc>
     57e:	fe 01       	movw	r30, r28
     580:	31 96       	adiw	r30, 0x01	; 1
				count = 0;
				for (int i = 0; i < 20; i++) {
					pass[i] = 0;
     582:	11 92       	st	Z+, r1
				command(0x01);
				display("CLEARING");
				_delay_ms(500);
				command(0x01);
				count = 0;
				for (int i = 0; i < 20; i++) {
     584:	ae 16       	cp	r10, r30
     586:	bf 06       	cpc	r11, r31
     588:	e1 f7       	brne	.-8      	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
     58a:	2e ce       	rjmp	.-932    	; 0x1e8 <main+0xc2>
					pass[i] = 0;
				}

			}else if((PINB&0x10) == 0){
     58c:	b4 99       	sbic	0x16, 4	; 22
     58e:	40 ce       	rjmp	.-896    	; 0x210 <main+0xea>
				if(plus == 1){
     590:	2d ad       	ldd	r18, Y+61	; 0x3d
     592:	3e ad       	ldd	r19, Y+62	; 0x3e
     594:	21 30       	cpi	r18, 0x01	; 1
     596:	31 05       	cpc	r19, r1
     598:	09 f0       	breq	.+2      	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
     59a:	56 c0       	rjmp	.+172    	; 0x648 <__LOCK_REGION_LENGTH__+0x248>
					if(flag!=1){
     59c:	8d a9       	ldd	r24, Y+53	; 0x35
     59e:	9e a9       	ldd	r25, Y+54	; 0x36
     5a0:	01 97       	sbiw	r24, 0x01	; 1
     5a2:	49 f1       	breq	.+82     	; 0x5f6 <__LOCK_REGION_LENGTH__+0x1f6>
						int sum = atoi(get);
     5a4:	c5 01       	movw	r24, r10
     5a6:	0e 94 3f 07 	call	0xe7e	; 0xe7e <atoi>
     5aa:	7c 01       	movw	r14, r24
						int sum1 = atoi(pass);
     5ac:	ce 01       	movw	r24, r28
     5ae:	01 96       	adiw	r24, 0x01	; 1
     5b0:	0e 94 3f 07 	call	0xe7e	; 0xe7e <atoi>
						int Result;
						Result = sum + sum1;
						sprintf(resultString, "%d", Result);
     5b4:	8e 0d       	add	r24, r14
     5b6:	9f 1d       	adc	r25, r15
     5b8:	9f 93       	push	r25
     5ba:	8f 93       	push	r24
     5bc:	2e e7       	ldi	r18, 0x7E	; 126
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	3f 93       	push	r19
     5c2:	2f 93       	push	r18
     5c4:	9c a9       	ldd	r25, Y+52	; 0x34
     5c6:	9f 93       	push	r25
     5c8:	2b a9       	ldd	r18, Y+51	; 0x33
     5ca:	2f 93       	push	r18
     5cc:	0e 94 95 07 	call	0xf2a	; 0xf2a <sprintf>
						command(0xC7);
     5d0:	87 ec       	ldi	r24, 0xC7	; 199
     5d2:	0e 94 67 00 	call	0xce	; 0xce <_Z7commandc>
						data('=');
     5d6:	8d e3       	ldi	r24, 0x3D	; 61
     5d8:	0e 94 75 00 	call	0xea	; 0xea <_Z4datac>
						display(resultString);
     5dc:	ce 01       	movw	r24, r28
     5de:	89 96       	adiw	r24, 0x29	; 41
     5e0:	0e 94 84 00 	call	0x108	; 0x108 <_Z7displayPKc>
     5e4:	0f 90       	pop	r0
     5e6:	0f 90       	pop	r0
     5e8:	0f 90       	pop	r0
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	0f 90       	pop	r0
						plus = 0;
     5f0:	1d ae       	std	Y+61, r1	; 0x3d
     5f2:	1e ae       	std	Y+62, r1	; 0x3e
     5f4:	61 c2       	rjmp	.+1218   	; 0xab8 <__stack+0x259>
					}
					else{
						int sum = atoi(get);
     5f6:	c5 01       	movw	r24, r10
     5f8:	0e 94 3f 07 	call	0xe7e	; 0xe7e <atoi>
     5fc:	7c 01       	movw	r14, r24
						int sum1 = atoi(pass);
     5fe:	ce 01       	movw	r24, r28
     600:	01 96       	adiw	r24, 0x01	; 1
     602:	0e 94 3f 07 	call	0xe7e	; 0xe7e <atoi>
						int Result;
						Result = (-sum) + sum1;
						sprintf(resultString, "%d", Result);
     606:	8e 19       	sub	r24, r14
     608:	9f 09       	sbc	r25, r15
     60a:	9f 93       	push	r25
     60c:	8f 93       	push	r24
     60e:	8e e7       	ldi	r24, 0x7E	; 126
     610:	90 e0       	ldi	r25, 0x00	; 0
     612:	9f 93       	push	r25
     614:	8f 93       	push	r24
     616:	3c a9       	ldd	r19, Y+52	; 0x34
     618:	3f 93       	push	r19
     61a:	8b a9       	ldd	r24, Y+51	; 0x33
     61c:	8f 93       	push	r24
     61e:	0e 94 95 07 	call	0xf2a	; 0xf2a <sprintf>
						command(0xC7);
     622:	87 ec       	ldi	r24, 0xC7	; 199
     624:	0e 94 67 00 	call	0xce	; 0xce <_Z7commandc>
						data('=');
     628:	8d e3       	ldi	r24, 0x3D	; 61
     62a:	0e 94 75 00 	call	0xea	; 0xea <_Z4datac>
						display(resultString);
     62e:	ce 01       	movw	r24, r28
     630:	89 96       	adiw	r24, 0x29	; 41
     632:	0e 94 84 00 	call	0x108	; 0x108 <_Z7displayPKc>
     636:	0f 90       	pop	r0
     638:	0f 90       	pop	r0
     63a:	0f 90       	pop	r0
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
     640:	0f 90       	pop	r0
						flag = 0;
     642:	1d aa       	std	Y+53, r1	; 0x35
     644:	1e aa       	std	Y+54, r1	; 0x36
     646:	38 c2       	rjmp	.+1136   	; 0xab8 <__stack+0x259>
					}
					
				}
				if(minus == 1){
     648:	21 96       	adiw	r28, 0x01	; 1
     64a:	2e ad       	ldd	r18, Y+62	; 0x3e
     64c:	3f ad       	ldd	r19, Y+63	; 0x3f
     64e:	21 97       	sbiw	r28, 0x01	; 1
     650:	21 30       	cpi	r18, 0x01	; 1
     652:	31 05       	cpc	r19, r1
     654:	09 f0       	breq	.+2      	; 0x658 <__LOCK_REGION_LENGTH__+0x258>
     656:	5f c0       	rjmp	.+190    	; 0x716 <__LOCK_REGION_LENGTH__+0x316>
					if(flag!=1){
     658:	8d a9       	ldd	r24, Y+53	; 0x35
     65a:	9e a9       	ldd	r25, Y+54	; 0x36
     65c:	01 97       	sbiw	r24, 0x01	; 1
     65e:	69 f1       	breq	.+90     	; 0x6ba <__LOCK_REGION_LENGTH__+0x2ba>
						int min = atoi(get);
     660:	c5 01       	movw	r24, r10
     662:	0e 94 3f 07 	call	0xe7e	; 0xe7e <atoi>
     666:	7c 01       	movw	r14, r24
						int min1 = atoi(pass);
     668:	ce 01       	movw	r24, r28
     66a:	01 96       	adiw	r24, 0x01	; 1
     66c:	0e 94 3f 07 	call	0xe7e	; 0xe7e <atoi>
						int Result;
						Result = min - min1;
						sprintf(resultString, "%d", Result);
     670:	97 01       	movw	r18, r14
     672:	28 1b       	sub	r18, r24
     674:	39 0b       	sbc	r19, r25
     676:	c9 01       	movw	r24, r18
     678:	9f 93       	push	r25
     67a:	2f 93       	push	r18
     67c:	8e e7       	ldi	r24, 0x7E	; 126
     67e:	90 e0       	ldi	r25, 0x00	; 0
     680:	9f 93       	push	r25
     682:	8f 93       	push	r24
     684:	3c a9       	ldd	r19, Y+52	; 0x34
     686:	3f 93       	push	r19
     688:	8b a9       	ldd	r24, Y+51	; 0x33
     68a:	8f 93       	push	r24
     68c:	0e 94 95 07 	call	0xf2a	; 0xf2a <sprintf>
						command(0xC7);
     690:	87 ec       	ldi	r24, 0xC7	; 199
     692:	0e 94 67 00 	call	0xce	; 0xce <_Z7commandc>
						data('=');
     696:	8d e3       	ldi	r24, 0x3D	; 61
     698:	0e 94 75 00 	call	0xea	; 0xea <_Z4datac>
						display(resultString);
     69c:	ce 01       	movw	r24, r28
     69e:	89 96       	adiw	r24, 0x29	; 41
     6a0:	0e 94 84 00 	call	0x108	; 0x108 <_Z7displayPKc>
     6a4:	0f 90       	pop	r0
     6a6:	0f 90       	pop	r0
     6a8:	0f 90       	pop	r0
     6aa:	0f 90       	pop	r0
     6ac:	0f 90       	pop	r0
     6ae:	0f 90       	pop	r0
						minus = 0;
     6b0:	1f ae       	std	Y+63, r1	; 0x3f
     6b2:	21 96       	adiw	r28, 0x01	; 1
     6b4:	1f ae       	std	Y+63, r1	; 0x3f
     6b6:	21 97       	sbiw	r28, 0x01	; 1
     6b8:	07 c2       	rjmp	.+1038   	; 0xac8 <__stack+0x269>
					}
					else{
						int min = atoi(get);
     6ba:	c5 01       	movw	r24, r10
     6bc:	0e 94 3f 07 	call	0xe7e	; 0xe7e <atoi>
     6c0:	7c 01       	movw	r14, r24
						int min1 = atoi(pass);
     6c2:	ce 01       	movw	r24, r28
     6c4:	01 96       	adiw	r24, 0x01	; 1
     6c6:	0e 94 3f 07 	call	0xe7e	; 0xe7e <atoi>
						int Result;
						Result = (-min) - min1;
						sprintf(resultString, "%d", Result);
     6ca:	f1 94       	neg	r15
     6cc:	e1 94       	neg	r14
     6ce:	f1 08       	sbc	r15, r1
     6d0:	97 01       	movw	r18, r14
     6d2:	28 1b       	sub	r18, r24
     6d4:	39 0b       	sbc	r19, r25
     6d6:	c9 01       	movw	r24, r18
     6d8:	9f 93       	push	r25
     6da:	2f 93       	push	r18
     6dc:	8e e7       	ldi	r24, 0x7E	; 126
     6de:	90 e0       	ldi	r25, 0x00	; 0
     6e0:	9f 93       	push	r25
     6e2:	8f 93       	push	r24
     6e4:	3c a9       	ldd	r19, Y+52	; 0x34
     6e6:	3f 93       	push	r19
     6e8:	8b a9       	ldd	r24, Y+51	; 0x33
     6ea:	8f 93       	push	r24
     6ec:	0e 94 95 07 	call	0xf2a	; 0xf2a <sprintf>
						command(0xC7);
     6f0:	87 ec       	ldi	r24, 0xC7	; 199
     6f2:	0e 94 67 00 	call	0xce	; 0xce <_Z7commandc>
						data('=');
     6f6:	8d e3       	ldi	r24, 0x3D	; 61
     6f8:	0e 94 75 00 	call	0xea	; 0xea <_Z4datac>
						display(resultString);
     6fc:	ce 01       	movw	r24, r28
     6fe:	89 96       	adiw	r24, 0x29	; 41
     700:	0e 94 84 00 	call	0x108	; 0x108 <_Z7displayPKc>
     704:	0f 90       	pop	r0
     706:	0f 90       	pop	r0
     708:	0f 90       	pop	r0
     70a:	0f 90       	pop	r0
     70c:	0f 90       	pop	r0
     70e:	0f 90       	pop	r0
						flag = 0;
     710:	1d aa       	std	Y+53, r1	; 0x35
     712:	1e aa       	std	Y+54, r1	; 0x36
     714:	d9 c1       	rjmp	.+946    	; 0xac8 <__stack+0x269>
					}
					
				}
				if(mult == 1){
     716:	91 e0       	ldi	r25, 0x01	; 1
     718:	29 16       	cp	r2, r25
     71a:	31 04       	cpc	r3, r1
     71c:	09 f0       	breq	.+2      	; 0x720 <__LOCK_REGION_LENGTH__+0x320>
     71e:	a4 c0       	rjmp	.+328    	; 0x868 <__stack+0x9>
					if(flag!=1){
     720:	2d a9       	ldd	r18, Y+53	; 0x35
     722:	3e a9       	ldd	r19, Y+54	; 0x36
     724:	21 30       	cpi	r18, 0x01	; 1
     726:	31 05       	cpc	r19, r1
     728:	a9 f1       	breq	.+106    	; 0x794 <__LOCK_REGION_LENGTH__+0x394>
						int mul = atoi(get);
     72a:	c5 01       	movw	r24, r10
     72c:	0e 94 3f 07 	call	0xe7e	; 0xe7e <atoi>
     730:	7c 01       	movw	r14, r24
						int mul1 = atoi(pass);
     732:	ce 01       	movw	r24, r28
     734:	01 96       	adiw	r24, 0x01	; 1
     736:	0e 94 3f 07 	call	0xe7e	; 0xe7e <atoi>
						int Result;
						Result = mul * mul1;
						sprintf(resultString, "%d", Result);
     73a:	9c 01       	movw	r18, r24
     73c:	e2 9e       	mul	r14, r18
     73e:	c0 01       	movw	r24, r0
     740:	e3 9e       	mul	r14, r19
     742:	90 0d       	add	r25, r0
     744:	f2 9e       	mul	r15, r18
     746:	90 0d       	add	r25, r0
     748:	11 24       	eor	r1, r1
     74a:	9f 93       	push	r25
     74c:	8f 93       	push	r24
     74e:	8e e7       	ldi	r24, 0x7E	; 126
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	9f 93       	push	r25
     754:	8f 93       	push	r24
     756:	3c a9       	ldd	r19, Y+52	; 0x34
     758:	3f 93       	push	r19
     75a:	8b a9       	ldd	r24, Y+51	; 0x33
     75c:	8f 93       	push	r24
     75e:	0e 94 95 07 	call	0xf2a	; 0xf2a <sprintf>
						command(0xC7);
     762:	87 ec       	ldi	r24, 0xC7	; 199
     764:	0e 94 67 00 	call	0xce	; 0xce <_Z7commandc>
						data('=');
     768:	8d e3       	ldi	r24, 0x3D	; 61
     76a:	0e 94 75 00 	call	0xea	; 0xea <_Z4datac>
						display(resultString);
     76e:	ce 01       	movw	r24, r28
     770:	89 96       	adiw	r24, 0x29	; 41
     772:	0e 94 84 00 	call	0x108	; 0x108 <_Z7displayPKc>
						 }
						
					}
					
				}
				if(divs == 1){
     776:	0f 90       	pop	r0
     778:	0f 90       	pop	r0
     77a:	0f 90       	pop	r0
     77c:	0f 90       	pop	r0
     77e:	0f 90       	pop	r0
     780:	0f 90       	pop	r0
     782:	29 ad       	ldd	r18, Y+57	; 0x39
     784:	3a ad       	ldd	r19, Y+58	; 0x3a
     786:	21 30       	cpi	r18, 0x01	; 1
     788:	31 05       	cpc	r19, r1
     78a:	09 f4       	brne	.+2      	; 0x78e <__LOCK_REGION_LENGTH__+0x38e>
     78c:	79 c0       	rjmp	.+242    	; 0x880 <__stack+0x21>
						Result = mul * mul1;
						sprintf(resultString, "%d", Result);
						command(0xC7);
						data('=');
						display(resultString);
						mult = 0;
     78e:	21 2c       	mov	r2, r1
     790:	31 2c       	mov	r3, r1
     792:	3e cd       	rjmp	.-1412   	; 0x210 <main+0xea>
						
					}
					 else{
						 if(minusof == 1){
     794:	31 e0       	ldi	r19, 0x01	; 1
     796:	83 16       	cp	r8, r19
     798:	91 04       	cpc	r9, r1
     79a:	91 f5       	brne	.+100    	; 0x800 <__LOCK_REGION_LENGTH__+0x400>
							 int mul = atoi(get);
     79c:	c5 01       	movw	r24, r10
     79e:	0e 94 3f 07 	call	0xe7e	; 0xe7e <atoi>
     7a2:	7c 01       	movw	r14, r24
							 int mul1 = atoi(pass);
     7a4:	ce 01       	movw	r24, r28
     7a6:	01 96       	adiw	r24, 0x01	; 1
     7a8:	0e 94 3f 07 	call	0xe7e	; 0xe7e <atoi>
							 int Result;
							 Result = (-mul) * mul1;
							 sprintf(resultString, "%d", Result);
     7ac:	f1 94       	neg	r15
     7ae:	e1 94       	neg	r14
     7b0:	f1 08       	sbc	r15, r1
     7b2:	9c 01       	movw	r18, r24
     7b4:	e2 9e       	mul	r14, r18
     7b6:	c0 01       	movw	r24, r0
     7b8:	e3 9e       	mul	r14, r19
     7ba:	90 0d       	add	r25, r0
     7bc:	f2 9e       	mul	r15, r18
     7be:	90 0d       	add	r25, r0
     7c0:	11 24       	eor	r1, r1
     7c2:	9f 93       	push	r25
     7c4:	8f 93       	push	r24
     7c6:	8e e7       	ldi	r24, 0x7E	; 126
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	9f 93       	push	r25
     7cc:	8f 93       	push	r24
     7ce:	3c a9       	ldd	r19, Y+52	; 0x34
     7d0:	3f 93       	push	r19
     7d2:	8b a9       	ldd	r24, Y+51	; 0x33
     7d4:	8f 93       	push	r24
     7d6:	0e 94 95 07 	call	0xf2a	; 0xf2a <sprintf>
							 command(0xC7);
     7da:	87 ec       	ldi	r24, 0xC7	; 199
     7dc:	0e 94 67 00 	call	0xce	; 0xce <_Z7commandc>
							 data('=');
     7e0:	8d e3       	ldi	r24, 0x3D	; 61
     7e2:	0e 94 75 00 	call	0xea	; 0xea <_Z4datac>
							 display(resultString);
     7e6:	ce 01       	movw	r24, r28
     7e8:	89 96       	adiw	r24, 0x29	; 41
     7ea:	0e 94 84 00 	call	0x108	; 0x108 <_Z7displayPKc>
     7ee:	0f 90       	pop	r0
     7f0:	0f 90       	pop	r0
     7f2:	0f 90       	pop	r0
     7f4:	0f 90       	pop	r0
     7f6:	0f 90       	pop	r0
     7f8:	0f 90       	pop	r0
							 mult = 0;
     7fa:	21 2c       	mov	r2, r1
     7fc:	31 2c       	mov	r3, r1
     7fe:	6a c1       	rjmp	.+724    	; 0xad4 <__stack+0x275>
							
						 }else if(minusof == 2){
     800:	92 e0       	ldi	r25, 0x02	; 2
     802:	89 16       	cp	r8, r25
     804:	91 04       	cpc	r9, r1
     806:	09 f0       	breq	.+2      	; 0x80a <__LOCK_REGION_LENGTH__+0x40a>
     808:	65 c1       	rjmp	.+714    	; 0xad4 <__stack+0x275>
							 int mul = atoi(get);
     80a:	c5 01       	movw	r24, r10
     80c:	0e 94 3f 07 	call	0xe7e	; 0xe7e <atoi>
     810:	7c 01       	movw	r14, r24
							 int mul1 = atoi(pass);
     812:	ce 01       	movw	r24, r28
     814:	01 96       	adiw	r24, 0x01	; 1
     816:	0e 94 3f 07 	call	0xe7e	; 0xe7e <atoi>
							 int Result;
							 Result = (-mul) * (-mul1);
							 sprintf(resultString, "%d", Result);
     81a:	9c 01       	movw	r18, r24
     81c:	e2 9e       	mul	r14, r18
     81e:	c0 01       	movw	r24, r0
     820:	e3 9e       	mul	r14, r19
     822:	90 0d       	add	r25, r0
     824:	f2 9e       	mul	r15, r18
     826:	90 0d       	add	r25, r0
     828:	11 24       	eor	r1, r1
     82a:	9f 93       	push	r25
     82c:	8f 93       	push	r24
     82e:	8e e7       	ldi	r24, 0x7E	; 126
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	9f 93       	push	r25
     834:	8f 93       	push	r24
     836:	3c a9       	ldd	r19, Y+52	; 0x34
     838:	3f 93       	push	r19
     83a:	8b a9       	ldd	r24, Y+51	; 0x33
     83c:	8f 93       	push	r24
     83e:	0e 94 95 07 	call	0xf2a	; 0xf2a <sprintf>
							 command(0xC7);
     842:	87 ec       	ldi	r24, 0xC7	; 199
     844:	0e 94 67 00 	call	0xce	; 0xce <_Z7commandc>
							 data('=');
     848:	8d e3       	ldi	r24, 0x3D	; 61
     84a:	0e 94 75 00 	call	0xea	; 0xea <_Z4datac>
							 display(resultString);
     84e:	ce 01       	movw	r24, r28
     850:	89 96       	adiw	r24, 0x29	; 41
     852:	0e 94 84 00 	call	0x108	; 0x108 <_Z7displayPKc>
     856:	0f 90       	pop	r0
     858:	0f 90       	pop	r0
     85a:	0f 90       	pop	r0
     85c:	0f 90       	pop	r0
     85e:	0f 90       	pop	r0
     860:	0f 90       	pop	r0
							 mult = 0;
     862:	21 2c       	mov	r2, r1
     864:	31 2c       	mov	r3, r1
     866:	36 c1       	rjmp	.+620    	; 0xad4 <__stack+0x275>
						 }
						
					}
					
				}
				if(divs == 1){
     868:	29 ad       	ldd	r18, Y+57	; 0x39
     86a:	3a ad       	ldd	r19, Y+58	; 0x3a
     86c:	21 30       	cpi	r18, 0x01	; 1
     86e:	31 05       	cpc	r19, r1
     870:	09 f0       	breq	.+2      	; 0x874 <__stack+0x15>
     872:	ce cc       	rjmp	.-1636   	; 0x210 <main+0xea>
					if(flag!=1){
     874:	8d a9       	ldd	r24, Y+53	; 0x35
     876:	9e a9       	ldd	r25, Y+54	; 0x36
     878:	01 97       	sbiw	r24, 0x01	; 1
     87a:	09 f4       	brne	.+2      	; 0x87e <__stack+0x1f>
     87c:	79 c0       	rjmp	.+242    	; 0x970 <__stack+0x111>
     87e:	02 c0       	rjmp	.+4      	; 0x884 <__stack+0x25>
						Result = mul * mul1;
						sprintf(resultString, "%d", Result);
						command(0xC7);
						data('=');
						display(resultString);
						mult = 0;
     880:	21 2c       	mov	r2, r1
     882:	31 2c       	mov	r3, r1
					}
					
				}
				if(divs == 1){
					if(flag!=1){
						double div= atof(get);
     884:	c5 01       	movw	r24, r10
     886:	0e 94 3b 07 	call	0xe76	; 0xe76 <atof>
     88a:	69 af       	std	Y+57, r22	; 0x39
     88c:	7a af       	std	Y+58, r23	; 0x3a
     88e:	8b af       	std	Y+59, r24	; 0x3b
     890:	9c af       	std	Y+60, r25	; 0x3c
						double div1 = atof(pass);
     892:	ce 01       	movw	r24, r28
     894:	01 96       	adiw	r24, 0x01	; 1
     896:	0e 94 3b 07 	call	0xe76	; 0xe76 <atof>
     89a:	6b 01       	movw	r12, r22
     89c:	7c 01       	movw	r14, r24
						double Result;
						if(div1>0){
     89e:	20 e0       	ldi	r18, 0x00	; 0
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	a9 01       	movw	r20, r18
     8a4:	0e 94 a1 06 	call	0xd42	; 0xd42 <__gesf2>
     8a8:	18 16       	cp	r1, r24
     8aa:	c4 f5       	brge	.+112    	; 0x91c <__stack+0xbd>
							Result = div / div1;
							int scalingFactor = 100;  // for two decimal places
							int ResultInt = (int)(Result * scalingFactor);
     8ac:	a7 01       	movw	r20, r14
     8ae:	96 01       	movw	r18, r12
     8b0:	69 ad       	ldd	r22, Y+57	; 0x39
     8b2:	7a ad       	ldd	r23, Y+58	; 0x3a
     8b4:	8b ad       	ldd	r24, Y+59	; 0x3b
     8b6:	9c ad       	ldd	r25, Y+60	; 0x3c
     8b8:	0e 94 84 05 	call	0xb08	; 0xb08 <__divsf3>
     8bc:	20 e0       	ldi	r18, 0x00	; 0
     8be:	30 e0       	ldi	r19, 0x00	; 0
     8c0:	48 ec       	ldi	r20, 0xC8	; 200
     8c2:	52 e4       	ldi	r21, 0x42	; 66
     8c4:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__mulsf3>
     8c8:	0e 94 f6 05 	call	0xbec	; 0xbec <__fixsfsi>

							snprintf(resultString, 20, "%d.%02d", ResultInt / 100, ResultInt % 100);
     8cc:	cb 01       	movw	r24, r22
     8ce:	64 e6       	ldi	r22, 0x64	; 100
     8d0:	70 e0       	ldi	r23, 0x00	; 0
     8d2:	0e 94 13 07 	call	0xe26	; 0xe26 <__divmodhi4>
     8d6:	9f 93       	push	r25
     8d8:	8f 93       	push	r24
     8da:	7f 93       	push	r23
     8dc:	6f 93       	push	r22
     8de:	21 e8       	ldi	r18, 0x81	; 129
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	3f 93       	push	r19
     8e4:	2f 93       	push	r18
     8e6:	1f 92       	push	r1
     8e8:	94 e1       	ldi	r25, 0x14	; 20
     8ea:	9f 93       	push	r25
     8ec:	2c a9       	ldd	r18, Y+52	; 0x34
     8ee:	2f 93       	push	r18
     8f0:	3b a9       	ldd	r19, Y+51	; 0x33
     8f2:	3f 93       	push	r19
     8f4:	0e 94 65 07 	call	0xeca	; 0xeca <snprintf>

							command(0xC7);
     8f8:	87 ec       	ldi	r24, 0xC7	; 199
     8fa:	0e 94 67 00 	call	0xce	; 0xce <_Z7commandc>
							data('=');
     8fe:	8d e3       	ldi	r24, 0x3D	; 61
     900:	0e 94 75 00 	call	0xea	; 0xea <_Z4datac>
							display(resultString);
     904:	ce 01       	movw	r24, r28
     906:	89 96       	adiw	r24, 0x29	; 41
     908:	0e 94 84 00 	call	0x108	; 0x108 <_Z7displayPKc>
     90c:	0f b6       	in	r0, 0x3f	; 63
     90e:	f8 94       	cli
     910:	de bf       	out	0x3e, r29	; 62
     912:	0f be       	out	0x3f, r0	; 63
     914:	cd bf       	out	0x3d, r28	; 61
							divs = 0;
     916:	19 ae       	std	Y+57, r1	; 0x39
     918:	1a ae       	std	Y+58, r1	; 0x3a
     91a:	7a cc       	rjmp	.-1804   	; 0x210 <main+0xea>
						}
						else{
							if(div1 == 0){
     91c:	20 e0       	ldi	r18, 0x00	; 0
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	a9 01       	movw	r20, r18
     922:	c7 01       	movw	r24, r14
     924:	b6 01       	movw	r22, r12
     926:	0e 94 7f 05 	call	0xafe	; 0xafe <__cmpsf2>
     92a:	81 11       	cpse	r24, r1
     92c:	62 cc       	rjmp	.-1852   	; 0x1f2 <main+0xcc>
								command(0x01);
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	0e 94 67 00 	call	0xce	; 0xce <_Z7commandc>
								command(0x80);
     934:	80 e8       	ldi	r24, 0x80	; 128
     936:	0e 94 67 00 	call	0xce	; 0xce <_Z7commandc>
								display("VALUE NOT BE ");
     93a:	89 e8       	ldi	r24, 0x89	; 137
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	0e 94 84 00 	call	0x108	; 0x108 <_Z7displayPKc>
								command(0xC4);
     942:	84 ec       	ldi	r24, 0xC4	; 196
     944:	0e 94 67 00 	call	0xce	; 0xce <_Z7commandc>
								display("CORRECT");
     948:	87 e9       	ldi	r24, 0x97	; 151
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	0e 94 84 00 	call	0x108	; 0x108 <_Z7displayPKc>
     950:	9f ef       	ldi	r25, 0xFF	; 255
     952:	2e e9       	ldi	r18, 0x9E	; 158
     954:	34 e2       	ldi	r19, 0x24	; 36
     956:	91 50       	subi	r25, 0x01	; 1
     958:	20 40       	sbci	r18, 0x00	; 0
     95a:	30 40       	sbci	r19, 0x00	; 0
     95c:	e1 f7       	brne	.-8      	; 0x956 <__stack+0xf7>
     95e:	00 c0       	rjmp	.+0      	; 0x960 <__stack+0x101>
     960:	00 00       	nop
								_delay_ms(1500);
								command(0x01);
     962:	81 e0       	ldi	r24, 0x01	; 1
     964:	0e 94 67 00 	call	0xce	; 0xce <_Z7commandc>
     968:	81 e0       	ldi	r24, 0x01	; 1
     96a:	89 af       	std	Y+57, r24	; 0x39
     96c:	1a ae       	std	Y+58, r1	; 0x3a
     96e:	50 cc       	rjmp	.-1888   	; 0x210 <main+0xea>
							}
							
						}
					 }
					  else if(flag == 1){
						  double div= atof(get);
     970:	c5 01       	movw	r24, r10
     972:	0e 94 3b 07 	call	0xe76	; 0xe76 <atof>
     976:	6b 01       	movw	r12, r22
     978:	7c 01       	movw	r14, r24
						  double div1 = atof(pass);
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	0e 94 3b 07 	call	0xe76	; 0xe76 <atof>
     982:	6d ab       	std	Y+53, r22	; 0x35
     984:	7e ab       	std	Y+54, r23	; 0x36
     986:	8f ab       	std	Y+55, r24	; 0x37
     988:	98 af       	std	Y+56, r25	; 0x38
						  double Result;
						  if(div1>0){
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	a9 01       	movw	r20, r18
     990:	0e 94 a1 06 	call	0xd42	; 0xd42 <__gesf2>
     994:	18 16       	cp	r1, r24
     996:	0c f0       	brlt	.+2      	; 0x99a <__stack+0x13b>
     998:	30 cc       	rjmp	.-1952   	; 0x1fa <main+0xd4>
							  if(minusof == 1){
     99a:	91 e0       	ldi	r25, 0x01	; 1
     99c:	89 16       	cp	r8, r25
     99e:	91 04       	cpc	r9, r1
     9a0:	e1 f5       	brne	.+120    	; 0xa1a <__stack+0x1bb>
								  Result = (-div) / div1;
								  int scalingFactor = 100;  // for two decimal places
								  int ResultInt = (int)(Result * scalingFactor);
     9a2:	c7 01       	movw	r24, r14
     9a4:	b6 01       	movw	r22, r12
     9a6:	90 58       	subi	r25, 0x80	; 128
     9a8:	2d a9       	ldd	r18, Y+53	; 0x35
     9aa:	3e a9       	ldd	r19, Y+54	; 0x36
     9ac:	4f a9       	ldd	r20, Y+55	; 0x37
     9ae:	58 ad       	ldd	r21, Y+56	; 0x38
     9b0:	0e 94 84 05 	call	0xb08	; 0xb08 <__divsf3>
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	48 ec       	ldi	r20, 0xC8	; 200
     9ba:	52 e4       	ldi	r21, 0x42	; 66
     9bc:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__mulsf3>
     9c0:	0e 94 f6 05 	call	0xbec	; 0xbec <__fixsfsi>

								  snprintf(resultString, 20, "%d.%02d", ResultInt / 100, ResultInt % 100);
     9c4:	cb 01       	movw	r24, r22
     9c6:	64 e6       	ldi	r22, 0x64	; 100
     9c8:	70 e0       	ldi	r23, 0x00	; 0
     9ca:	0e 94 13 07 	call	0xe26	; 0xe26 <__divmodhi4>
     9ce:	9f 93       	push	r25
     9d0:	8f 93       	push	r24
     9d2:	7f 93       	push	r23
     9d4:	6f 93       	push	r22
     9d6:	21 e8       	ldi	r18, 0x81	; 129
     9d8:	30 e0       	ldi	r19, 0x00	; 0
     9da:	3f 93       	push	r19
     9dc:	2f 93       	push	r18
     9de:	1f 92       	push	r1
     9e0:	94 e1       	ldi	r25, 0x14	; 20
     9e2:	9f 93       	push	r25
     9e4:	2c a9       	ldd	r18, Y+52	; 0x34
     9e6:	2f 93       	push	r18
     9e8:	3b a9       	ldd	r19, Y+51	; 0x33
     9ea:	3f 93       	push	r19
     9ec:	0e 94 65 07 	call	0xeca	; 0xeca <snprintf>

								  command(0xC7);
     9f0:	87 ec       	ldi	r24, 0xC7	; 199
     9f2:	0e 94 67 00 	call	0xce	; 0xce <_Z7commandc>
								  data('=');
     9f6:	8d e3       	ldi	r24, 0x3D	; 61
     9f8:	0e 94 75 00 	call	0xea	; 0xea <_Z4datac>
								  display(resultString);
     9fc:	ce 01       	movw	r24, r28
     9fe:	89 96       	adiw	r24, 0x29	; 41
     a00:	0e 94 84 00 	call	0x108	; 0x108 <_Z7displayPKc>
     a04:	0f b6       	in	r0, 0x3f	; 63
     a06:	f8 94       	cli
     a08:	de bf       	out	0x3e, r29	; 62
     a0a:	0f be       	out	0x3f, r0	; 63
     a0c:	cd bf       	out	0x3d, r28	; 61
								  flag = 0;
     a0e:	1d aa       	std	Y+53, r1	; 0x35
     a10:	1e aa       	std	Y+54, r1	; 0x36

								  snprintf(resultString, 20, "%d.%02d", ResultInt / 100, ResultInt % 100);

								  command(0xC7);
								  data('=');
								  display(resultString);
     a12:	91 e0       	ldi	r25, 0x01	; 1
     a14:	99 af       	std	Y+57, r25	; 0x39
     a16:	1a ae       	std	Y+58, r1	; 0x3a
     a18:	fb cb       	rjmp	.-2058   	; 0x210 <main+0xea>
								  flag = 0;
							  }if(minusof == 2){
     a1a:	22 e0       	ldi	r18, 0x02	; 2
     a1c:	82 16       	cp	r8, r18
     a1e:	91 04       	cpc	r9, r1
     a20:	09 f0       	breq	.+2      	; 0xa24 <__stack+0x1c5>
     a22:	f1 cb       	rjmp	.-2078   	; 0x206 <main+0xe0>
								  Result = (-div) / (-div1);
								  int scalingFactor = 100;  // for two decimal places
								  int ResultInt = (int)(Result * scalingFactor);
     a24:	2d a9       	ldd	r18, Y+53	; 0x35
     a26:	3e a9       	ldd	r19, Y+54	; 0x36
     a28:	4f a9       	ldd	r20, Y+55	; 0x37
     a2a:	58 ad       	ldd	r21, Y+56	; 0x38
     a2c:	c7 01       	movw	r24, r14
     a2e:	b6 01       	movw	r22, r12
     a30:	0e 94 84 05 	call	0xb08	; 0xb08 <__divsf3>
     a34:	20 e0       	ldi	r18, 0x00	; 0
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	48 ec       	ldi	r20, 0xC8	; 200
     a3a:	52 e4       	ldi	r21, 0x42	; 66
     a3c:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__mulsf3>
     a40:	0e 94 f6 05 	call	0xbec	; 0xbec <__fixsfsi>

								  snprintf(resultString, 20, "%d.%02d", ResultInt / 100, ResultInt % 100);
     a44:	cb 01       	movw	r24, r22
     a46:	64 e6       	ldi	r22, 0x64	; 100
     a48:	70 e0       	ldi	r23, 0x00	; 0
     a4a:	0e 94 13 07 	call	0xe26	; 0xe26 <__divmodhi4>
     a4e:	9f 93       	push	r25
     a50:	8f 93       	push	r24
     a52:	7f 93       	push	r23
     a54:	6f 93       	push	r22
     a56:	81 e8       	ldi	r24, 0x81	; 129
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	9f 93       	push	r25
     a5c:	8f 93       	push	r24
     a5e:	1f 92       	push	r1
     a60:	34 e1       	ldi	r19, 0x14	; 20
     a62:	3f 93       	push	r19
     a64:	8c a9       	ldd	r24, Y+52	; 0x34
     a66:	8f 93       	push	r24
     a68:	9b a9       	ldd	r25, Y+51	; 0x33
     a6a:	9f 93       	push	r25
     a6c:	0e 94 65 07 	call	0xeca	; 0xeca <snprintf>

								  command(0xC7);
     a70:	87 ec       	ldi	r24, 0xC7	; 199
     a72:	0e 94 67 00 	call	0xce	; 0xce <_Z7commandc>
								  data('=');
     a76:	8d e3       	ldi	r24, 0x3D	; 61
     a78:	0e 94 75 00 	call	0xea	; 0xea <_Z4datac>
								  display(resultString);
     a7c:	ce 01       	movw	r24, r28
     a7e:	89 96       	adiw	r24, 0x29	; 41
     a80:	0e 94 84 00 	call	0x108	; 0x108 <_Z7displayPKc>
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	f8 94       	cli
     a88:	de bf       	out	0x3e, r29	; 62
     a8a:	0f be       	out	0x3f, r0	; 63
     a8c:	cd bf       	out	0x3d, r28	; 61
								  flag = 0;
     a8e:	1d aa       	std	Y+53, r1	; 0x35
     a90:	1e aa       	std	Y+54, r1	; 0x36
     a92:	31 e0       	ldi	r19, 0x01	; 1
     a94:	39 af       	std	Y+57, r19	; 0x39
     a96:	1a ae       	std	Y+58, r1	; 0x3a
     a98:	bb cb       	rjmp	.-2186   	; 0x210 <main+0xea>
				while((PINB&0x10)==0);
				command(0xC0);
			}
			PORTB = 0x07;
			if((PINB&0x80) == 0){
				command(0x8F);
     a9a:	8f e8       	ldi	r24, 0x8F	; 143
     a9c:	0e 94 67 00 	call	0xce	; 0xce <_Z7commandc>
				mult = 1;
				data('X');
     aa0:	88 e5       	ldi	r24, 0x58	; 88
     aa2:	0e 94 75 00 	call	0xea	; 0xea <_Z4datac>
				for(int i = 0;i<count + 1;i++){
     aa6:	41 e0       	ldi	r20, 0x01	; 1
     aa8:	50 e0       	ldi	r21, 0x00	; 0
			}
			PORTB = 0x07;
			if((PINB&0x80) == 0){
				command(0x8F);
				mult = 1;
				data('X');
     aaa:	00 e0       	ldi	r16, 0x00	; 0
     aac:	10 e0       	ldi	r17, 0x00	; 0
     aae:	ff cc       	rjmp	.-1538   	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
				}
				count = 0;
				while((PINB&0x10)==0);
				command(0xC0);
			}
			PORTB = 0x07;
     ab0:	48 ba       	out	0x18, r4	; 24
			if((PINB&0x80) == 0){
     ab2:	b7 9b       	sbis	0x16, 7	; 22
     ab4:	f2 cf       	rjmp	.-28     	; 0xa9a <__stack+0x23b>
     ab6:	1e c0       	rjmp	.+60     	; 0xaf4 <__stack+0x295>
						display(resultString);
						flag = 0;
					}
					
				}
				if(minus == 1){
     ab8:	21 96       	adiw	r28, 0x01	; 1
     aba:	8e ad       	ldd	r24, Y+62	; 0x3e
     abc:	9f ad       	ldd	r25, Y+63	; 0x3f
     abe:	21 97       	sbiw	r28, 0x01	; 1
     ac0:	01 97       	sbiw	r24, 0x01	; 1
     ac2:	09 f0       	breq	.+2      	; 0xac6 <__stack+0x267>
     ac4:	28 ce       	rjmp	.-944    	; 0x716 <__LOCK_REGION_LENGTH__+0x316>
     ac6:	cc cd       	rjmp	.-1128   	; 0x660 <__LOCK_REGION_LENGTH__+0x260>
						display(resultString);
						flag = 0;
					}
					
				}
				if(mult == 1){
     ac8:	91 e0       	ldi	r25, 0x01	; 1
     aca:	29 16       	cp	r2, r25
     acc:	31 04       	cpc	r3, r1
     ace:	09 f0       	breq	.+2      	; 0xad2 <__stack+0x273>
     ad0:	cb ce       	rjmp	.-618    	; 0x868 <__stack+0x9>
     ad2:	2b ce       	rjmp	.-938    	; 0x72a <__LOCK_REGION_LENGTH__+0x32a>
						 }
						
					}
					
				}
				if(divs == 1){
     ad4:	29 ad       	ldd	r18, Y+57	; 0x39
     ad6:	3a ad       	ldd	r19, Y+58	; 0x3a
     ad8:	21 30       	cpi	r18, 0x01	; 1
     ada:	31 05       	cpc	r19, r1
     adc:	09 f0       	breq	.+2      	; 0xae0 <__stack+0x281>
     ade:	98 cb       	rjmp	.-2256   	; 0x210 <main+0xea>
     ae0:	47 cf       	rjmp	.-370    	; 0x970 <__stack+0x111>
				}
				count = 0;
				while((PINB&0x80)==0);
				command(0xC0);
			}else if((PINB&0x40) == 0){
				command(0x8F);
     ae2:	8f e8       	ldi	r24, 0x8F	; 143
     ae4:	0e 94 67 00 	call	0xce	; 0xce <_Z7commandc>
				divs = 1;
				data('/');
     ae8:	8f e2       	ldi	r24, 0x2F	; 47
     aea:	0e 94 75 00 	call	0xea	; 0xea <_Z4datac>
     aee:	00 e0       	ldi	r16, 0x00	; 0
     af0:	10 e0       	ldi	r17, 0x00	; 0
     af2:	0e cd       	rjmp	.-1508   	; 0x510 <__LOCK_REGION_LENGTH__+0x110>
					pass[i] = 0;
				}
				count = 0;
				while((PINB&0x80)==0);
				command(0xC0);
			}else if((PINB&0x40) == 0){
     af4:	b6 9b       	sbis	0x16, 6	; 22
     af6:	f5 cf       	rjmp	.-22     	; 0xae2 <__stack+0x283>
     af8:	00 e0       	ldi	r16, 0x00	; 0
     afa:	10 e0       	ldi	r17, 0x00	; 0
     afc:	2b cd       	rjmp	.-1450   	; 0x554 <__LOCK_REGION_LENGTH__+0x154>

00000afe <__cmpsf2>:
     afe:	0e 94 2c 06 	call	0xc58	; 0xc58 <__fp_cmp>
     b02:	08 f4       	brcc	.+2      	; 0xb06 <__cmpsf2+0x8>
     b04:	81 e0       	ldi	r24, 0x01	; 1
     b06:	08 95       	ret

00000b08 <__divsf3>:
     b08:	0e 94 98 05 	call	0xb30	; 0xb30 <__divsf3x>
     b0c:	0c 94 67 06 	jmp	0xcce	; 0xcce <__fp_round>
     b10:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__fp_pscB>
     b14:	58 f0       	brcs	.+22     	; 0xb2c <__divsf3+0x24>
     b16:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__fp_pscA>
     b1a:	40 f0       	brcs	.+16     	; 0xb2c <__divsf3+0x24>
     b1c:	29 f4       	brne	.+10     	; 0xb28 <__divsf3+0x20>
     b1e:	5f 3f       	cpi	r21, 0xFF	; 255
     b20:	29 f0       	breq	.+10     	; 0xb2c <__divsf3+0x24>
     b22:	0c 94 50 06 	jmp	0xca0	; 0xca0 <__fp_inf>
     b26:	51 11       	cpse	r21, r1
     b28:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__fp_szero>
     b2c:	0c 94 56 06 	jmp	0xcac	; 0xcac <__fp_nan>

00000b30 <__divsf3x>:
     b30:	0e 94 78 06 	call	0xcf0	; 0xcf0 <__fp_split3>
     b34:	68 f3       	brcs	.-38     	; 0xb10 <__divsf3+0x8>

00000b36 <__divsf3_pse>:
     b36:	99 23       	and	r25, r25
     b38:	b1 f3       	breq	.-20     	; 0xb26 <__divsf3+0x1e>
     b3a:	55 23       	and	r21, r21
     b3c:	91 f3       	breq	.-28     	; 0xb22 <__divsf3+0x1a>
     b3e:	95 1b       	sub	r25, r21
     b40:	55 0b       	sbc	r21, r21
     b42:	bb 27       	eor	r27, r27
     b44:	aa 27       	eor	r26, r26
     b46:	62 17       	cp	r22, r18
     b48:	73 07       	cpc	r23, r19
     b4a:	84 07       	cpc	r24, r20
     b4c:	38 f0       	brcs	.+14     	; 0xb5c <__divsf3_pse+0x26>
     b4e:	9f 5f       	subi	r25, 0xFF	; 255
     b50:	5f 4f       	sbci	r21, 0xFF	; 255
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	aa 1f       	adc	r26, r26
     b5a:	a9 f3       	breq	.-22     	; 0xb46 <__divsf3_pse+0x10>
     b5c:	35 d0       	rcall	.+106    	; 0xbc8 <__divsf3_pse+0x92>
     b5e:	0e 2e       	mov	r0, r30
     b60:	3a f0       	brmi	.+14     	; 0xb70 <__divsf3_pse+0x3a>
     b62:	e0 e8       	ldi	r30, 0x80	; 128
     b64:	32 d0       	rcall	.+100    	; 0xbca <__divsf3_pse+0x94>
     b66:	91 50       	subi	r25, 0x01	; 1
     b68:	50 40       	sbci	r21, 0x00	; 0
     b6a:	e6 95       	lsr	r30
     b6c:	00 1c       	adc	r0, r0
     b6e:	ca f7       	brpl	.-14     	; 0xb62 <__divsf3_pse+0x2c>
     b70:	2b d0       	rcall	.+86     	; 0xbc8 <__divsf3_pse+0x92>
     b72:	fe 2f       	mov	r31, r30
     b74:	29 d0       	rcall	.+82     	; 0xbc8 <__divsf3_pse+0x92>
     b76:	66 0f       	add	r22, r22
     b78:	77 1f       	adc	r23, r23
     b7a:	88 1f       	adc	r24, r24
     b7c:	bb 1f       	adc	r27, r27
     b7e:	26 17       	cp	r18, r22
     b80:	37 07       	cpc	r19, r23
     b82:	48 07       	cpc	r20, r24
     b84:	ab 07       	cpc	r26, r27
     b86:	b0 e8       	ldi	r27, 0x80	; 128
     b88:	09 f0       	breq	.+2      	; 0xb8c <__divsf3_pse+0x56>
     b8a:	bb 0b       	sbc	r27, r27
     b8c:	80 2d       	mov	r24, r0
     b8e:	bf 01       	movw	r22, r30
     b90:	ff 27       	eor	r31, r31
     b92:	93 58       	subi	r25, 0x83	; 131
     b94:	5f 4f       	sbci	r21, 0xFF	; 255
     b96:	3a f0       	brmi	.+14     	; 0xba6 <__divsf3_pse+0x70>
     b98:	9e 3f       	cpi	r25, 0xFE	; 254
     b9a:	51 05       	cpc	r21, r1
     b9c:	78 f0       	brcs	.+30     	; 0xbbc <__divsf3_pse+0x86>
     b9e:	0c 94 50 06 	jmp	0xca0	; 0xca0 <__fp_inf>
     ba2:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__fp_szero>
     ba6:	5f 3f       	cpi	r21, 0xFF	; 255
     ba8:	e4 f3       	brlt	.-8      	; 0xba2 <__divsf3_pse+0x6c>
     baa:	98 3e       	cpi	r25, 0xE8	; 232
     bac:	d4 f3       	brlt	.-12     	; 0xba2 <__divsf3_pse+0x6c>
     bae:	86 95       	lsr	r24
     bb0:	77 95       	ror	r23
     bb2:	67 95       	ror	r22
     bb4:	b7 95       	ror	r27
     bb6:	f7 95       	ror	r31
     bb8:	9f 5f       	subi	r25, 0xFF	; 255
     bba:	c9 f7       	brne	.-14     	; 0xbae <__divsf3_pse+0x78>
     bbc:	88 0f       	add	r24, r24
     bbe:	91 1d       	adc	r25, r1
     bc0:	96 95       	lsr	r25
     bc2:	87 95       	ror	r24
     bc4:	97 f9       	bld	r25, 7
     bc6:	08 95       	ret
     bc8:	e1 e0       	ldi	r30, 0x01	; 1
     bca:	66 0f       	add	r22, r22
     bcc:	77 1f       	adc	r23, r23
     bce:	88 1f       	adc	r24, r24
     bd0:	bb 1f       	adc	r27, r27
     bd2:	62 17       	cp	r22, r18
     bd4:	73 07       	cpc	r23, r19
     bd6:	84 07       	cpc	r24, r20
     bd8:	ba 07       	cpc	r27, r26
     bda:	20 f0       	brcs	.+8      	; 0xbe4 <__divsf3_pse+0xae>
     bdc:	62 1b       	sub	r22, r18
     bde:	73 0b       	sbc	r23, r19
     be0:	84 0b       	sbc	r24, r20
     be2:	ba 0b       	sbc	r27, r26
     be4:	ee 1f       	adc	r30, r30
     be6:	88 f7       	brcc	.-30     	; 0xbca <__divsf3_pse+0x94>
     be8:	e0 95       	com	r30
     bea:	08 95       	ret

00000bec <__fixsfsi>:
     bec:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__fixunssfsi>
     bf0:	68 94       	set
     bf2:	b1 11       	cpse	r27, r1
     bf4:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__fp_szero>
     bf8:	08 95       	ret

00000bfa <__fixunssfsi>:
     bfa:	0e 94 80 06 	call	0xd00	; 0xd00 <__fp_splitA>
     bfe:	88 f0       	brcs	.+34     	; 0xc22 <__fixunssfsi+0x28>
     c00:	9f 57       	subi	r25, 0x7F	; 127
     c02:	98 f0       	brcs	.+38     	; 0xc2a <__fixunssfsi+0x30>
     c04:	b9 2f       	mov	r27, r25
     c06:	99 27       	eor	r25, r25
     c08:	b7 51       	subi	r27, 0x17	; 23
     c0a:	b0 f0       	brcs	.+44     	; 0xc38 <__fixunssfsi+0x3e>
     c0c:	e1 f0       	breq	.+56     	; 0xc46 <__fixunssfsi+0x4c>
     c0e:	66 0f       	add	r22, r22
     c10:	77 1f       	adc	r23, r23
     c12:	88 1f       	adc	r24, r24
     c14:	99 1f       	adc	r25, r25
     c16:	1a f0       	brmi	.+6      	; 0xc1e <__fixunssfsi+0x24>
     c18:	ba 95       	dec	r27
     c1a:	c9 f7       	brne	.-14     	; 0xc0e <__fixunssfsi+0x14>
     c1c:	14 c0       	rjmp	.+40     	; 0xc46 <__fixunssfsi+0x4c>
     c1e:	b1 30       	cpi	r27, 0x01	; 1
     c20:	91 f0       	breq	.+36     	; 0xc46 <__fixunssfsi+0x4c>
     c22:	0e 94 9a 06 	call	0xd34	; 0xd34 <__fp_zero>
     c26:	b1 e0       	ldi	r27, 0x01	; 1
     c28:	08 95       	ret
     c2a:	0c 94 9a 06 	jmp	0xd34	; 0xd34 <__fp_zero>
     c2e:	67 2f       	mov	r22, r23
     c30:	78 2f       	mov	r23, r24
     c32:	88 27       	eor	r24, r24
     c34:	b8 5f       	subi	r27, 0xF8	; 248
     c36:	39 f0       	breq	.+14     	; 0xc46 <__fixunssfsi+0x4c>
     c38:	b9 3f       	cpi	r27, 0xF9	; 249
     c3a:	cc f3       	brlt	.-14     	; 0xc2e <__fixunssfsi+0x34>
     c3c:	86 95       	lsr	r24
     c3e:	77 95       	ror	r23
     c40:	67 95       	ror	r22
     c42:	b3 95       	inc	r27
     c44:	d9 f7       	brne	.-10     	; 0xc3c <__fixunssfsi+0x42>
     c46:	3e f4       	brtc	.+14     	; 0xc56 <__fixunssfsi+0x5c>
     c48:	90 95       	com	r25
     c4a:	80 95       	com	r24
     c4c:	70 95       	com	r23
     c4e:	61 95       	neg	r22
     c50:	7f 4f       	sbci	r23, 0xFF	; 255
     c52:	8f 4f       	sbci	r24, 0xFF	; 255
     c54:	9f 4f       	sbci	r25, 0xFF	; 255
     c56:	08 95       	ret

00000c58 <__fp_cmp>:
     c58:	99 0f       	add	r25, r25
     c5a:	00 08       	sbc	r0, r0
     c5c:	55 0f       	add	r21, r21
     c5e:	aa 0b       	sbc	r26, r26
     c60:	e0 e8       	ldi	r30, 0x80	; 128
     c62:	fe ef       	ldi	r31, 0xFE	; 254
     c64:	16 16       	cp	r1, r22
     c66:	17 06       	cpc	r1, r23
     c68:	e8 07       	cpc	r30, r24
     c6a:	f9 07       	cpc	r31, r25
     c6c:	c0 f0       	brcs	.+48     	; 0xc9e <__fp_cmp+0x46>
     c6e:	12 16       	cp	r1, r18
     c70:	13 06       	cpc	r1, r19
     c72:	e4 07       	cpc	r30, r20
     c74:	f5 07       	cpc	r31, r21
     c76:	98 f0       	brcs	.+38     	; 0xc9e <__fp_cmp+0x46>
     c78:	62 1b       	sub	r22, r18
     c7a:	73 0b       	sbc	r23, r19
     c7c:	84 0b       	sbc	r24, r20
     c7e:	95 0b       	sbc	r25, r21
     c80:	39 f4       	brne	.+14     	; 0xc90 <__fp_cmp+0x38>
     c82:	0a 26       	eor	r0, r26
     c84:	61 f0       	breq	.+24     	; 0xc9e <__fp_cmp+0x46>
     c86:	23 2b       	or	r18, r19
     c88:	24 2b       	or	r18, r20
     c8a:	25 2b       	or	r18, r21
     c8c:	21 f4       	brne	.+8      	; 0xc96 <__fp_cmp+0x3e>
     c8e:	08 95       	ret
     c90:	0a 26       	eor	r0, r26
     c92:	09 f4       	brne	.+2      	; 0xc96 <__fp_cmp+0x3e>
     c94:	a1 40       	sbci	r26, 0x01	; 1
     c96:	a6 95       	lsr	r26
     c98:	8f ef       	ldi	r24, 0xFF	; 255
     c9a:	81 1d       	adc	r24, r1
     c9c:	81 1d       	adc	r24, r1
     c9e:	08 95       	ret

00000ca0 <__fp_inf>:
     ca0:	97 f9       	bld	r25, 7
     ca2:	9f 67       	ori	r25, 0x7F	; 127
     ca4:	80 e8       	ldi	r24, 0x80	; 128
     ca6:	70 e0       	ldi	r23, 0x00	; 0
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	08 95       	ret

00000cac <__fp_nan>:
     cac:	9f ef       	ldi	r25, 0xFF	; 255
     cae:	80 ec       	ldi	r24, 0xC0	; 192
     cb0:	08 95       	ret

00000cb2 <__fp_pscA>:
     cb2:	00 24       	eor	r0, r0
     cb4:	0a 94       	dec	r0
     cb6:	16 16       	cp	r1, r22
     cb8:	17 06       	cpc	r1, r23
     cba:	18 06       	cpc	r1, r24
     cbc:	09 06       	cpc	r0, r25
     cbe:	08 95       	ret

00000cc0 <__fp_pscB>:
     cc0:	00 24       	eor	r0, r0
     cc2:	0a 94       	dec	r0
     cc4:	12 16       	cp	r1, r18
     cc6:	13 06       	cpc	r1, r19
     cc8:	14 06       	cpc	r1, r20
     cca:	05 06       	cpc	r0, r21
     ccc:	08 95       	ret

00000cce <__fp_round>:
     cce:	09 2e       	mov	r0, r25
     cd0:	03 94       	inc	r0
     cd2:	00 0c       	add	r0, r0
     cd4:	11 f4       	brne	.+4      	; 0xcda <__fp_round+0xc>
     cd6:	88 23       	and	r24, r24
     cd8:	52 f0       	brmi	.+20     	; 0xcee <__fp_round+0x20>
     cda:	bb 0f       	add	r27, r27
     cdc:	40 f4       	brcc	.+16     	; 0xcee <__fp_round+0x20>
     cde:	bf 2b       	or	r27, r31
     ce0:	11 f4       	brne	.+4      	; 0xce6 <__fp_round+0x18>
     ce2:	60 ff       	sbrs	r22, 0
     ce4:	04 c0       	rjmp	.+8      	; 0xcee <__fp_round+0x20>
     ce6:	6f 5f       	subi	r22, 0xFF	; 255
     ce8:	7f 4f       	sbci	r23, 0xFF	; 255
     cea:	8f 4f       	sbci	r24, 0xFF	; 255
     cec:	9f 4f       	sbci	r25, 0xFF	; 255
     cee:	08 95       	ret

00000cf0 <__fp_split3>:
     cf0:	57 fd       	sbrc	r21, 7
     cf2:	90 58       	subi	r25, 0x80	; 128
     cf4:	44 0f       	add	r20, r20
     cf6:	55 1f       	adc	r21, r21
     cf8:	59 f0       	breq	.+22     	; 0xd10 <__fp_splitA+0x10>
     cfa:	5f 3f       	cpi	r21, 0xFF	; 255
     cfc:	71 f0       	breq	.+28     	; 0xd1a <__fp_splitA+0x1a>
     cfe:	47 95       	ror	r20

00000d00 <__fp_splitA>:
     d00:	88 0f       	add	r24, r24
     d02:	97 fb       	bst	r25, 7
     d04:	99 1f       	adc	r25, r25
     d06:	61 f0       	breq	.+24     	; 0xd20 <__fp_splitA+0x20>
     d08:	9f 3f       	cpi	r25, 0xFF	; 255
     d0a:	79 f0       	breq	.+30     	; 0xd2a <__fp_splitA+0x2a>
     d0c:	87 95       	ror	r24
     d0e:	08 95       	ret
     d10:	12 16       	cp	r1, r18
     d12:	13 06       	cpc	r1, r19
     d14:	14 06       	cpc	r1, r20
     d16:	55 1f       	adc	r21, r21
     d18:	f2 cf       	rjmp	.-28     	; 0xcfe <__fp_split3+0xe>
     d1a:	46 95       	lsr	r20
     d1c:	f1 df       	rcall	.-30     	; 0xd00 <__fp_splitA>
     d1e:	08 c0       	rjmp	.+16     	; 0xd30 <__fp_splitA+0x30>
     d20:	16 16       	cp	r1, r22
     d22:	17 06       	cpc	r1, r23
     d24:	18 06       	cpc	r1, r24
     d26:	99 1f       	adc	r25, r25
     d28:	f1 cf       	rjmp	.-30     	; 0xd0c <__fp_splitA+0xc>
     d2a:	86 95       	lsr	r24
     d2c:	71 05       	cpc	r23, r1
     d2e:	61 05       	cpc	r22, r1
     d30:	08 94       	sec
     d32:	08 95       	ret

00000d34 <__fp_zero>:
     d34:	e8 94       	clt

00000d36 <__fp_szero>:
     d36:	bb 27       	eor	r27, r27
     d38:	66 27       	eor	r22, r22
     d3a:	77 27       	eor	r23, r23
     d3c:	cb 01       	movw	r24, r22
     d3e:	97 f9       	bld	r25, 7
     d40:	08 95       	ret

00000d42 <__gesf2>:
     d42:	0e 94 2c 06 	call	0xc58	; 0xc58 <__fp_cmp>
     d46:	08 f4       	brcc	.+2      	; 0xd4a <__gesf2+0x8>
     d48:	8f ef       	ldi	r24, 0xFF	; 255
     d4a:	08 95       	ret

00000d4c <__mulsf3>:
     d4c:	0e 94 b9 06 	call	0xd72	; 0xd72 <__mulsf3x>
     d50:	0c 94 67 06 	jmp	0xcce	; 0xcce <__fp_round>
     d54:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__fp_pscA>
     d58:	38 f0       	brcs	.+14     	; 0xd68 <__mulsf3+0x1c>
     d5a:	0e 94 60 06 	call	0xcc0	; 0xcc0 <__fp_pscB>
     d5e:	20 f0       	brcs	.+8      	; 0xd68 <__mulsf3+0x1c>
     d60:	95 23       	and	r25, r21
     d62:	11 f0       	breq	.+4      	; 0xd68 <__mulsf3+0x1c>
     d64:	0c 94 50 06 	jmp	0xca0	; 0xca0 <__fp_inf>
     d68:	0c 94 56 06 	jmp	0xcac	; 0xcac <__fp_nan>
     d6c:	11 24       	eor	r1, r1
     d6e:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__fp_szero>

00000d72 <__mulsf3x>:
     d72:	0e 94 78 06 	call	0xcf0	; 0xcf0 <__fp_split3>
     d76:	70 f3       	brcs	.-36     	; 0xd54 <__mulsf3+0x8>

00000d78 <__mulsf3_pse>:
     d78:	95 9f       	mul	r25, r21
     d7a:	c1 f3       	breq	.-16     	; 0xd6c <__mulsf3+0x20>
     d7c:	95 0f       	add	r25, r21
     d7e:	50 e0       	ldi	r21, 0x00	; 0
     d80:	55 1f       	adc	r21, r21
     d82:	62 9f       	mul	r22, r18
     d84:	f0 01       	movw	r30, r0
     d86:	72 9f       	mul	r23, r18
     d88:	bb 27       	eor	r27, r27
     d8a:	f0 0d       	add	r31, r0
     d8c:	b1 1d       	adc	r27, r1
     d8e:	63 9f       	mul	r22, r19
     d90:	aa 27       	eor	r26, r26
     d92:	f0 0d       	add	r31, r0
     d94:	b1 1d       	adc	r27, r1
     d96:	aa 1f       	adc	r26, r26
     d98:	64 9f       	mul	r22, r20
     d9a:	66 27       	eor	r22, r22
     d9c:	b0 0d       	add	r27, r0
     d9e:	a1 1d       	adc	r26, r1
     da0:	66 1f       	adc	r22, r22
     da2:	82 9f       	mul	r24, r18
     da4:	22 27       	eor	r18, r18
     da6:	b0 0d       	add	r27, r0
     da8:	a1 1d       	adc	r26, r1
     daa:	62 1f       	adc	r22, r18
     dac:	73 9f       	mul	r23, r19
     dae:	b0 0d       	add	r27, r0
     db0:	a1 1d       	adc	r26, r1
     db2:	62 1f       	adc	r22, r18
     db4:	83 9f       	mul	r24, r19
     db6:	a0 0d       	add	r26, r0
     db8:	61 1d       	adc	r22, r1
     dba:	22 1f       	adc	r18, r18
     dbc:	74 9f       	mul	r23, r20
     dbe:	33 27       	eor	r19, r19
     dc0:	a0 0d       	add	r26, r0
     dc2:	61 1d       	adc	r22, r1
     dc4:	23 1f       	adc	r18, r19
     dc6:	84 9f       	mul	r24, r20
     dc8:	60 0d       	add	r22, r0
     dca:	21 1d       	adc	r18, r1
     dcc:	82 2f       	mov	r24, r18
     dce:	76 2f       	mov	r23, r22
     dd0:	6a 2f       	mov	r22, r26
     dd2:	11 24       	eor	r1, r1
     dd4:	9f 57       	subi	r25, 0x7F	; 127
     dd6:	50 40       	sbci	r21, 0x00	; 0
     dd8:	9a f0       	brmi	.+38     	; 0xe00 <__mulsf3_pse+0x88>
     dda:	f1 f0       	breq	.+60     	; 0xe18 <__mulsf3_pse+0xa0>
     ddc:	88 23       	and	r24, r24
     dde:	4a f0       	brmi	.+18     	; 0xdf2 <__mulsf3_pse+0x7a>
     de0:	ee 0f       	add	r30, r30
     de2:	ff 1f       	adc	r31, r31
     de4:	bb 1f       	adc	r27, r27
     de6:	66 1f       	adc	r22, r22
     de8:	77 1f       	adc	r23, r23
     dea:	88 1f       	adc	r24, r24
     dec:	91 50       	subi	r25, 0x01	; 1
     dee:	50 40       	sbci	r21, 0x00	; 0
     df0:	a9 f7       	brne	.-22     	; 0xddc <__mulsf3_pse+0x64>
     df2:	9e 3f       	cpi	r25, 0xFE	; 254
     df4:	51 05       	cpc	r21, r1
     df6:	80 f0       	brcs	.+32     	; 0xe18 <__mulsf3_pse+0xa0>
     df8:	0c 94 50 06 	jmp	0xca0	; 0xca0 <__fp_inf>
     dfc:	0c 94 9b 06 	jmp	0xd36	; 0xd36 <__fp_szero>
     e00:	5f 3f       	cpi	r21, 0xFF	; 255
     e02:	e4 f3       	brlt	.-8      	; 0xdfc <__mulsf3_pse+0x84>
     e04:	98 3e       	cpi	r25, 0xE8	; 232
     e06:	d4 f3       	brlt	.-12     	; 0xdfc <__mulsf3_pse+0x84>
     e08:	86 95       	lsr	r24
     e0a:	77 95       	ror	r23
     e0c:	67 95       	ror	r22
     e0e:	b7 95       	ror	r27
     e10:	f7 95       	ror	r31
     e12:	e7 95       	ror	r30
     e14:	9f 5f       	subi	r25, 0xFF	; 255
     e16:	c1 f7       	brne	.-16     	; 0xe08 <__mulsf3_pse+0x90>
     e18:	fe 2b       	or	r31, r30
     e1a:	88 0f       	add	r24, r24
     e1c:	91 1d       	adc	r25, r1
     e1e:	96 95       	lsr	r25
     e20:	87 95       	ror	r24
     e22:	97 f9       	bld	r25, 7
     e24:	08 95       	ret

00000e26 <__divmodhi4>:
     e26:	97 fb       	bst	r25, 7
     e28:	07 2e       	mov	r0, r23
     e2a:	16 f4       	brtc	.+4      	; 0xe30 <__divmodhi4+0xa>
     e2c:	00 94       	com	r0
     e2e:	07 d0       	rcall	.+14     	; 0xe3e <__divmodhi4_neg1>
     e30:	77 fd       	sbrc	r23, 7
     e32:	09 d0       	rcall	.+18     	; 0xe46 <__divmodhi4_neg2>
     e34:	0e 94 27 07 	call	0xe4e	; 0xe4e <__udivmodhi4>
     e38:	07 fc       	sbrc	r0, 7
     e3a:	05 d0       	rcall	.+10     	; 0xe46 <__divmodhi4_neg2>
     e3c:	3e f4       	brtc	.+14     	; 0xe4c <__divmodhi4_exit>

00000e3e <__divmodhi4_neg1>:
     e3e:	90 95       	com	r25
     e40:	81 95       	neg	r24
     e42:	9f 4f       	sbci	r25, 0xFF	; 255
     e44:	08 95       	ret

00000e46 <__divmodhi4_neg2>:
     e46:	70 95       	com	r23
     e48:	61 95       	neg	r22
     e4a:	7f 4f       	sbci	r23, 0xFF	; 255

00000e4c <__divmodhi4_exit>:
     e4c:	08 95       	ret

00000e4e <__udivmodhi4>:
     e4e:	aa 1b       	sub	r26, r26
     e50:	bb 1b       	sub	r27, r27
     e52:	51 e1       	ldi	r21, 0x11	; 17
     e54:	07 c0       	rjmp	.+14     	; 0xe64 <__udivmodhi4_ep>

00000e56 <__udivmodhi4_loop>:
     e56:	aa 1f       	adc	r26, r26
     e58:	bb 1f       	adc	r27, r27
     e5a:	a6 17       	cp	r26, r22
     e5c:	b7 07       	cpc	r27, r23
     e5e:	10 f0       	brcs	.+4      	; 0xe64 <__udivmodhi4_ep>
     e60:	a6 1b       	sub	r26, r22
     e62:	b7 0b       	sbc	r27, r23

00000e64 <__udivmodhi4_ep>:
     e64:	88 1f       	adc	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	5a 95       	dec	r21
     e6a:	a9 f7       	brne	.-22     	; 0xe56 <__udivmodhi4_loop>
     e6c:	80 95       	com	r24
     e6e:	90 95       	com	r25
     e70:	bc 01       	movw	r22, r24
     e72:	cd 01       	movw	r24, r26
     e74:	08 95       	ret

00000e76 <atof>:
     e76:	66 27       	eor	r22, r22
     e78:	77 27       	eor	r23, r23
     e7a:	0c 94 98 09 	jmp	0x1330	; 0x1330 <strtod>

00000e7e <atoi>:
     e7e:	fc 01       	movw	r30, r24
     e80:	88 27       	eor	r24, r24
     e82:	99 27       	eor	r25, r25
     e84:	e8 94       	clt
     e86:	21 91       	ld	r18, Z+
     e88:	20 32       	cpi	r18, 0x20	; 32
     e8a:	e9 f3       	breq	.-6      	; 0xe86 <atoi+0x8>
     e8c:	29 30       	cpi	r18, 0x09	; 9
     e8e:	10 f0       	brcs	.+4      	; 0xe94 <atoi+0x16>
     e90:	2e 30       	cpi	r18, 0x0E	; 14
     e92:	c8 f3       	brcs	.-14     	; 0xe86 <atoi+0x8>
     e94:	2b 32       	cpi	r18, 0x2B	; 43
     e96:	41 f0       	breq	.+16     	; 0xea8 <atoi+0x2a>
     e98:	2d 32       	cpi	r18, 0x2D	; 45
     e9a:	39 f4       	brne	.+14     	; 0xeaa <atoi+0x2c>
     e9c:	68 94       	set
     e9e:	04 c0       	rjmp	.+8      	; 0xea8 <atoi+0x2a>
     ea0:	0e 94 5d 07 	call	0xeba	; 0xeba <__mulhi_const_10>
     ea4:	82 0f       	add	r24, r18
     ea6:	91 1d       	adc	r25, r1
     ea8:	21 91       	ld	r18, Z+
     eaa:	20 53       	subi	r18, 0x30	; 48
     eac:	2a 30       	cpi	r18, 0x0A	; 10
     eae:	c0 f3       	brcs	.-16     	; 0xea0 <atoi+0x22>
     eb0:	1e f4       	brtc	.+6      	; 0xeb8 <atoi+0x3a>
     eb2:	90 95       	com	r25
     eb4:	81 95       	neg	r24
     eb6:	9f 4f       	sbci	r25, 0xFF	; 255
     eb8:	08 95       	ret

00000eba <__mulhi_const_10>:
     eba:	7a e0       	ldi	r23, 0x0A	; 10
     ebc:	97 9f       	mul	r25, r23
     ebe:	90 2d       	mov	r25, r0
     ec0:	87 9f       	mul	r24, r23
     ec2:	80 2d       	mov	r24, r0
     ec4:	91 0d       	add	r25, r1
     ec6:	11 24       	eor	r1, r1
     ec8:	08 95       	ret

00000eca <snprintf>:
     eca:	ae e0       	ldi	r26, 0x0E	; 14
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	eb e6       	ldi	r30, 0x6B	; 107
     ed0:	f7 e0       	ldi	r31, 0x07	; 7
     ed2:	0c 94 10 0c 	jmp	0x1820	; 0x1820 <__prologue_saves__+0x1c>
     ed6:	0d 89       	ldd	r16, Y+21	; 0x15
     ed8:	1e 89       	ldd	r17, Y+22	; 0x16
     eda:	8f 89       	ldd	r24, Y+23	; 0x17
     edc:	98 8d       	ldd	r25, Y+24	; 0x18
     ede:	26 e0       	ldi	r18, 0x06	; 6
     ee0:	2c 83       	std	Y+4, r18	; 0x04
     ee2:	1a 83       	std	Y+2, r17	; 0x02
     ee4:	09 83       	std	Y+1, r16	; 0x01
     ee6:	97 ff       	sbrs	r25, 7
     ee8:	02 c0       	rjmp	.+4      	; 0xeee <snprintf+0x24>
     eea:	80 e0       	ldi	r24, 0x00	; 0
     eec:	90 e8       	ldi	r25, 0x80	; 128
     eee:	01 97       	sbiw	r24, 0x01	; 1
     ef0:	9e 83       	std	Y+6, r25	; 0x06
     ef2:	8d 83       	std	Y+5, r24	; 0x05
     ef4:	ae 01       	movw	r20, r28
     ef6:	45 5e       	subi	r20, 0xE5	; 229
     ef8:	5f 4f       	sbci	r21, 0xFF	; 255
     efa:	69 8d       	ldd	r22, Y+25	; 0x19
     efc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     efe:	ce 01       	movw	r24, r28
     f00:	01 96       	adiw	r24, 0x01	; 1
     f02:	0e 94 b7 07 	call	0xf6e	; 0xf6e <vfprintf>
     f06:	4d 81       	ldd	r20, Y+5	; 0x05
     f08:	5e 81       	ldd	r21, Y+6	; 0x06
     f0a:	57 fd       	sbrc	r21, 7
     f0c:	0a c0       	rjmp	.+20     	; 0xf22 <snprintf+0x58>
     f0e:	2f 81       	ldd	r18, Y+7	; 0x07
     f10:	38 85       	ldd	r19, Y+8	; 0x08
     f12:	42 17       	cp	r20, r18
     f14:	53 07       	cpc	r21, r19
     f16:	0c f4       	brge	.+2      	; 0xf1a <snprintf+0x50>
     f18:	9a 01       	movw	r18, r20
     f1a:	f8 01       	movw	r30, r16
     f1c:	e2 0f       	add	r30, r18
     f1e:	f3 1f       	adc	r31, r19
     f20:	10 82       	st	Z, r1
     f22:	2e 96       	adiw	r28, 0x0e	; 14
     f24:	e4 e0       	ldi	r30, 0x04	; 4
     f26:	0c 94 2c 0c 	jmp	0x1858	; 0x1858 <__epilogue_restores__+0x1c>

00000f2a <sprintf>:
     f2a:	ae e0       	ldi	r26, 0x0E	; 14
     f2c:	b0 e0       	ldi	r27, 0x00	; 0
     f2e:	eb e9       	ldi	r30, 0x9B	; 155
     f30:	f7 e0       	ldi	r31, 0x07	; 7
     f32:	0c 94 10 0c 	jmp	0x1820	; 0x1820 <__prologue_saves__+0x1c>
     f36:	0d 89       	ldd	r16, Y+21	; 0x15
     f38:	1e 89       	ldd	r17, Y+22	; 0x16
     f3a:	86 e0       	ldi	r24, 0x06	; 6
     f3c:	8c 83       	std	Y+4, r24	; 0x04
     f3e:	1a 83       	std	Y+2, r17	; 0x02
     f40:	09 83       	std	Y+1, r16	; 0x01
     f42:	8f ef       	ldi	r24, 0xFF	; 255
     f44:	9f e7       	ldi	r25, 0x7F	; 127
     f46:	9e 83       	std	Y+6, r25	; 0x06
     f48:	8d 83       	std	Y+5, r24	; 0x05
     f4a:	ae 01       	movw	r20, r28
     f4c:	47 5e       	subi	r20, 0xE7	; 231
     f4e:	5f 4f       	sbci	r21, 0xFF	; 255
     f50:	6f 89       	ldd	r22, Y+23	; 0x17
     f52:	78 8d       	ldd	r23, Y+24	; 0x18
     f54:	ce 01       	movw	r24, r28
     f56:	01 96       	adiw	r24, 0x01	; 1
     f58:	0e 94 b7 07 	call	0xf6e	; 0xf6e <vfprintf>
     f5c:	ef 81       	ldd	r30, Y+7	; 0x07
     f5e:	f8 85       	ldd	r31, Y+8	; 0x08
     f60:	e0 0f       	add	r30, r16
     f62:	f1 1f       	adc	r31, r17
     f64:	10 82       	st	Z, r1
     f66:	2e 96       	adiw	r28, 0x0e	; 14
     f68:	e4 e0       	ldi	r30, 0x04	; 4
     f6a:	0c 94 2c 0c 	jmp	0x1858	; 0x1858 <__epilogue_restores__+0x1c>

00000f6e <vfprintf>:
     f6e:	ab e0       	ldi	r26, 0x0B	; 11
     f70:	b0 e0       	ldi	r27, 0x00	; 0
     f72:	ed eb       	ldi	r30, 0xBD	; 189
     f74:	f7 e0       	ldi	r31, 0x07	; 7
     f76:	0c 94 02 0c 	jmp	0x1804	; 0x1804 <__prologue_saves__>
     f7a:	6c 01       	movw	r12, r24
     f7c:	7b 01       	movw	r14, r22
     f7e:	8a 01       	movw	r16, r20
     f80:	fc 01       	movw	r30, r24
     f82:	17 82       	std	Z+7, r1	; 0x07
     f84:	16 82       	std	Z+6, r1	; 0x06
     f86:	83 81       	ldd	r24, Z+3	; 0x03
     f88:	81 ff       	sbrs	r24, 1
     f8a:	cc c1       	rjmp	.+920    	; 0x1324 <vfprintf+0x3b6>
     f8c:	ce 01       	movw	r24, r28
     f8e:	01 96       	adiw	r24, 0x01	; 1
     f90:	3c 01       	movw	r6, r24
     f92:	f6 01       	movw	r30, r12
     f94:	93 81       	ldd	r25, Z+3	; 0x03
     f96:	f7 01       	movw	r30, r14
     f98:	93 fd       	sbrc	r25, 3
     f9a:	85 91       	lpm	r24, Z+
     f9c:	93 ff       	sbrs	r25, 3
     f9e:	81 91       	ld	r24, Z+
     fa0:	7f 01       	movw	r14, r30
     fa2:	88 23       	and	r24, r24
     fa4:	09 f4       	brne	.+2      	; 0xfa8 <vfprintf+0x3a>
     fa6:	ba c1       	rjmp	.+884    	; 0x131c <vfprintf+0x3ae>
     fa8:	85 32       	cpi	r24, 0x25	; 37
     faa:	39 f4       	brne	.+14     	; 0xfba <vfprintf+0x4c>
     fac:	93 fd       	sbrc	r25, 3
     fae:	85 91       	lpm	r24, Z+
     fb0:	93 ff       	sbrs	r25, 3
     fb2:	81 91       	ld	r24, Z+
     fb4:	7f 01       	movw	r14, r30
     fb6:	85 32       	cpi	r24, 0x25	; 37
     fb8:	29 f4       	brne	.+10     	; 0xfc4 <vfprintf+0x56>
     fba:	b6 01       	movw	r22, r12
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	0e 94 1d 0b 	call	0x163a	; 0x163a <fputc>
     fc2:	e7 cf       	rjmp	.-50     	; 0xf92 <vfprintf+0x24>
     fc4:	91 2c       	mov	r9, r1
     fc6:	21 2c       	mov	r2, r1
     fc8:	31 2c       	mov	r3, r1
     fca:	ff e1       	ldi	r31, 0x1F	; 31
     fcc:	f3 15       	cp	r31, r3
     fce:	d8 f0       	brcs	.+54     	; 0x1006 <vfprintf+0x98>
     fd0:	8b 32       	cpi	r24, 0x2B	; 43
     fd2:	79 f0       	breq	.+30     	; 0xff2 <vfprintf+0x84>
     fd4:	38 f4       	brcc	.+14     	; 0xfe4 <vfprintf+0x76>
     fd6:	80 32       	cpi	r24, 0x20	; 32
     fd8:	79 f0       	breq	.+30     	; 0xff8 <vfprintf+0x8a>
     fda:	83 32       	cpi	r24, 0x23	; 35
     fdc:	a1 f4       	brne	.+40     	; 0x1006 <vfprintf+0x98>
     fde:	23 2d       	mov	r18, r3
     fe0:	20 61       	ori	r18, 0x10	; 16
     fe2:	1d c0       	rjmp	.+58     	; 0x101e <vfprintf+0xb0>
     fe4:	8d 32       	cpi	r24, 0x2D	; 45
     fe6:	61 f0       	breq	.+24     	; 0x1000 <vfprintf+0x92>
     fe8:	80 33       	cpi	r24, 0x30	; 48
     fea:	69 f4       	brne	.+26     	; 0x1006 <vfprintf+0x98>
     fec:	23 2d       	mov	r18, r3
     fee:	21 60       	ori	r18, 0x01	; 1
     ff0:	16 c0       	rjmp	.+44     	; 0x101e <vfprintf+0xb0>
     ff2:	83 2d       	mov	r24, r3
     ff4:	82 60       	ori	r24, 0x02	; 2
     ff6:	38 2e       	mov	r3, r24
     ff8:	e3 2d       	mov	r30, r3
     ffa:	e4 60       	ori	r30, 0x04	; 4
     ffc:	3e 2e       	mov	r3, r30
     ffe:	2a c0       	rjmp	.+84     	; 0x1054 <vfprintf+0xe6>
    1000:	f3 2d       	mov	r31, r3
    1002:	f8 60       	ori	r31, 0x08	; 8
    1004:	1d c0       	rjmp	.+58     	; 0x1040 <vfprintf+0xd2>
    1006:	37 fc       	sbrc	r3, 7
    1008:	2d c0       	rjmp	.+90     	; 0x1064 <vfprintf+0xf6>
    100a:	20 ed       	ldi	r18, 0xD0	; 208
    100c:	28 0f       	add	r18, r24
    100e:	2a 30       	cpi	r18, 0x0A	; 10
    1010:	40 f0       	brcs	.+16     	; 0x1022 <vfprintf+0xb4>
    1012:	8e 32       	cpi	r24, 0x2E	; 46
    1014:	b9 f4       	brne	.+46     	; 0x1044 <vfprintf+0xd6>
    1016:	36 fc       	sbrc	r3, 6
    1018:	81 c1       	rjmp	.+770    	; 0x131c <vfprintf+0x3ae>
    101a:	23 2d       	mov	r18, r3
    101c:	20 64       	ori	r18, 0x40	; 64
    101e:	32 2e       	mov	r3, r18
    1020:	19 c0       	rjmp	.+50     	; 0x1054 <vfprintf+0xe6>
    1022:	36 fe       	sbrs	r3, 6
    1024:	06 c0       	rjmp	.+12     	; 0x1032 <vfprintf+0xc4>
    1026:	8a e0       	ldi	r24, 0x0A	; 10
    1028:	98 9e       	mul	r9, r24
    102a:	20 0d       	add	r18, r0
    102c:	11 24       	eor	r1, r1
    102e:	92 2e       	mov	r9, r18
    1030:	11 c0       	rjmp	.+34     	; 0x1054 <vfprintf+0xe6>
    1032:	ea e0       	ldi	r30, 0x0A	; 10
    1034:	2e 9e       	mul	r2, r30
    1036:	20 0d       	add	r18, r0
    1038:	11 24       	eor	r1, r1
    103a:	22 2e       	mov	r2, r18
    103c:	f3 2d       	mov	r31, r3
    103e:	f0 62       	ori	r31, 0x20	; 32
    1040:	3f 2e       	mov	r3, r31
    1042:	08 c0       	rjmp	.+16     	; 0x1054 <vfprintf+0xe6>
    1044:	8c 36       	cpi	r24, 0x6C	; 108
    1046:	21 f4       	brne	.+8      	; 0x1050 <vfprintf+0xe2>
    1048:	83 2d       	mov	r24, r3
    104a:	80 68       	ori	r24, 0x80	; 128
    104c:	38 2e       	mov	r3, r24
    104e:	02 c0       	rjmp	.+4      	; 0x1054 <vfprintf+0xe6>
    1050:	88 36       	cpi	r24, 0x68	; 104
    1052:	41 f4       	brne	.+16     	; 0x1064 <vfprintf+0xf6>
    1054:	f7 01       	movw	r30, r14
    1056:	93 fd       	sbrc	r25, 3
    1058:	85 91       	lpm	r24, Z+
    105a:	93 ff       	sbrs	r25, 3
    105c:	81 91       	ld	r24, Z+
    105e:	7f 01       	movw	r14, r30
    1060:	81 11       	cpse	r24, r1
    1062:	b3 cf       	rjmp	.-154    	; 0xfca <vfprintf+0x5c>
    1064:	98 2f       	mov	r25, r24
    1066:	9f 7d       	andi	r25, 0xDF	; 223
    1068:	95 54       	subi	r25, 0x45	; 69
    106a:	93 30       	cpi	r25, 0x03	; 3
    106c:	28 f4       	brcc	.+10     	; 0x1078 <vfprintf+0x10a>
    106e:	0c 5f       	subi	r16, 0xFC	; 252
    1070:	1f 4f       	sbci	r17, 0xFF	; 255
    1072:	9f e3       	ldi	r25, 0x3F	; 63
    1074:	99 83       	std	Y+1, r25	; 0x01
    1076:	0d c0       	rjmp	.+26     	; 0x1092 <vfprintf+0x124>
    1078:	83 36       	cpi	r24, 0x63	; 99
    107a:	31 f0       	breq	.+12     	; 0x1088 <vfprintf+0x11a>
    107c:	83 37       	cpi	r24, 0x73	; 115
    107e:	71 f0       	breq	.+28     	; 0x109c <vfprintf+0x12e>
    1080:	83 35       	cpi	r24, 0x53	; 83
    1082:	09 f0       	breq	.+2      	; 0x1086 <vfprintf+0x118>
    1084:	59 c0       	rjmp	.+178    	; 0x1138 <vfprintf+0x1ca>
    1086:	21 c0       	rjmp	.+66     	; 0x10ca <vfprintf+0x15c>
    1088:	f8 01       	movw	r30, r16
    108a:	80 81       	ld	r24, Z
    108c:	89 83       	std	Y+1, r24	; 0x01
    108e:	0e 5f       	subi	r16, 0xFE	; 254
    1090:	1f 4f       	sbci	r17, 0xFF	; 255
    1092:	88 24       	eor	r8, r8
    1094:	83 94       	inc	r8
    1096:	91 2c       	mov	r9, r1
    1098:	53 01       	movw	r10, r6
    109a:	13 c0       	rjmp	.+38     	; 0x10c2 <vfprintf+0x154>
    109c:	28 01       	movw	r4, r16
    109e:	f2 e0       	ldi	r31, 0x02	; 2
    10a0:	4f 0e       	add	r4, r31
    10a2:	51 1c       	adc	r5, r1
    10a4:	f8 01       	movw	r30, r16
    10a6:	a0 80       	ld	r10, Z
    10a8:	b1 80       	ldd	r11, Z+1	; 0x01
    10aa:	36 fe       	sbrs	r3, 6
    10ac:	03 c0       	rjmp	.+6      	; 0x10b4 <vfprintf+0x146>
    10ae:	69 2d       	mov	r22, r9
    10b0:	70 e0       	ldi	r23, 0x00	; 0
    10b2:	02 c0       	rjmp	.+4      	; 0x10b8 <vfprintf+0x14a>
    10b4:	6f ef       	ldi	r22, 0xFF	; 255
    10b6:	7f ef       	ldi	r23, 0xFF	; 255
    10b8:	c5 01       	movw	r24, r10
    10ba:	0e 94 12 0b 	call	0x1624	; 0x1624 <strnlen>
    10be:	4c 01       	movw	r8, r24
    10c0:	82 01       	movw	r16, r4
    10c2:	f3 2d       	mov	r31, r3
    10c4:	ff 77       	andi	r31, 0x7F	; 127
    10c6:	3f 2e       	mov	r3, r31
    10c8:	16 c0       	rjmp	.+44     	; 0x10f6 <vfprintf+0x188>
    10ca:	28 01       	movw	r4, r16
    10cc:	22 e0       	ldi	r18, 0x02	; 2
    10ce:	42 0e       	add	r4, r18
    10d0:	51 1c       	adc	r5, r1
    10d2:	f8 01       	movw	r30, r16
    10d4:	a0 80       	ld	r10, Z
    10d6:	b1 80       	ldd	r11, Z+1	; 0x01
    10d8:	36 fe       	sbrs	r3, 6
    10da:	03 c0       	rjmp	.+6      	; 0x10e2 <vfprintf+0x174>
    10dc:	69 2d       	mov	r22, r9
    10de:	70 e0       	ldi	r23, 0x00	; 0
    10e0:	02 c0       	rjmp	.+4      	; 0x10e6 <vfprintf+0x178>
    10e2:	6f ef       	ldi	r22, 0xFF	; 255
    10e4:	7f ef       	ldi	r23, 0xFF	; 255
    10e6:	c5 01       	movw	r24, r10
    10e8:	0e 94 07 0b 	call	0x160e	; 0x160e <strnlen_P>
    10ec:	4c 01       	movw	r8, r24
    10ee:	f3 2d       	mov	r31, r3
    10f0:	f0 68       	ori	r31, 0x80	; 128
    10f2:	3f 2e       	mov	r3, r31
    10f4:	82 01       	movw	r16, r4
    10f6:	33 fc       	sbrc	r3, 3
    10f8:	1b c0       	rjmp	.+54     	; 0x1130 <vfprintf+0x1c2>
    10fa:	82 2d       	mov	r24, r2
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	88 16       	cp	r8, r24
    1100:	99 06       	cpc	r9, r25
    1102:	b0 f4       	brcc	.+44     	; 0x1130 <vfprintf+0x1c2>
    1104:	b6 01       	movw	r22, r12
    1106:	80 e2       	ldi	r24, 0x20	; 32
    1108:	90 e0       	ldi	r25, 0x00	; 0
    110a:	0e 94 1d 0b 	call	0x163a	; 0x163a <fputc>
    110e:	2a 94       	dec	r2
    1110:	f4 cf       	rjmp	.-24     	; 0x10fa <vfprintf+0x18c>
    1112:	f5 01       	movw	r30, r10
    1114:	37 fc       	sbrc	r3, 7
    1116:	85 91       	lpm	r24, Z+
    1118:	37 fe       	sbrs	r3, 7
    111a:	81 91       	ld	r24, Z+
    111c:	5f 01       	movw	r10, r30
    111e:	b6 01       	movw	r22, r12
    1120:	90 e0       	ldi	r25, 0x00	; 0
    1122:	0e 94 1d 0b 	call	0x163a	; 0x163a <fputc>
    1126:	21 10       	cpse	r2, r1
    1128:	2a 94       	dec	r2
    112a:	21 e0       	ldi	r18, 0x01	; 1
    112c:	82 1a       	sub	r8, r18
    112e:	91 08       	sbc	r9, r1
    1130:	81 14       	cp	r8, r1
    1132:	91 04       	cpc	r9, r1
    1134:	71 f7       	brne	.-36     	; 0x1112 <vfprintf+0x1a4>
    1136:	e8 c0       	rjmp	.+464    	; 0x1308 <vfprintf+0x39a>
    1138:	84 36       	cpi	r24, 0x64	; 100
    113a:	11 f0       	breq	.+4      	; 0x1140 <vfprintf+0x1d2>
    113c:	89 36       	cpi	r24, 0x69	; 105
    113e:	41 f5       	brne	.+80     	; 0x1190 <vfprintf+0x222>
    1140:	f8 01       	movw	r30, r16
    1142:	37 fe       	sbrs	r3, 7
    1144:	07 c0       	rjmp	.+14     	; 0x1154 <vfprintf+0x1e6>
    1146:	60 81       	ld	r22, Z
    1148:	71 81       	ldd	r23, Z+1	; 0x01
    114a:	82 81       	ldd	r24, Z+2	; 0x02
    114c:	93 81       	ldd	r25, Z+3	; 0x03
    114e:	0c 5f       	subi	r16, 0xFC	; 252
    1150:	1f 4f       	sbci	r17, 0xFF	; 255
    1152:	08 c0       	rjmp	.+16     	; 0x1164 <vfprintf+0x1f6>
    1154:	60 81       	ld	r22, Z
    1156:	71 81       	ldd	r23, Z+1	; 0x01
    1158:	07 2e       	mov	r0, r23
    115a:	00 0c       	add	r0, r0
    115c:	88 0b       	sbc	r24, r24
    115e:	99 0b       	sbc	r25, r25
    1160:	0e 5f       	subi	r16, 0xFE	; 254
    1162:	1f 4f       	sbci	r17, 0xFF	; 255
    1164:	f3 2d       	mov	r31, r3
    1166:	ff 76       	andi	r31, 0x6F	; 111
    1168:	3f 2e       	mov	r3, r31
    116a:	97 ff       	sbrs	r25, 7
    116c:	09 c0       	rjmp	.+18     	; 0x1180 <vfprintf+0x212>
    116e:	90 95       	com	r25
    1170:	80 95       	com	r24
    1172:	70 95       	com	r23
    1174:	61 95       	neg	r22
    1176:	7f 4f       	sbci	r23, 0xFF	; 255
    1178:	8f 4f       	sbci	r24, 0xFF	; 255
    117a:	9f 4f       	sbci	r25, 0xFF	; 255
    117c:	f0 68       	ori	r31, 0x80	; 128
    117e:	3f 2e       	mov	r3, r31
    1180:	2a e0       	ldi	r18, 0x0A	; 10
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	a3 01       	movw	r20, r6
    1186:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <__ultoa_invert>
    118a:	88 2e       	mov	r8, r24
    118c:	86 18       	sub	r8, r6
    118e:	45 c0       	rjmp	.+138    	; 0x121a <vfprintf+0x2ac>
    1190:	85 37       	cpi	r24, 0x75	; 117
    1192:	31 f4       	brne	.+12     	; 0x11a0 <vfprintf+0x232>
    1194:	23 2d       	mov	r18, r3
    1196:	2f 7e       	andi	r18, 0xEF	; 239
    1198:	b2 2e       	mov	r11, r18
    119a:	2a e0       	ldi	r18, 0x0A	; 10
    119c:	30 e0       	ldi	r19, 0x00	; 0
    119e:	25 c0       	rjmp	.+74     	; 0x11ea <vfprintf+0x27c>
    11a0:	93 2d       	mov	r25, r3
    11a2:	99 7f       	andi	r25, 0xF9	; 249
    11a4:	b9 2e       	mov	r11, r25
    11a6:	8f 36       	cpi	r24, 0x6F	; 111
    11a8:	c1 f0       	breq	.+48     	; 0x11da <vfprintf+0x26c>
    11aa:	18 f4       	brcc	.+6      	; 0x11b2 <vfprintf+0x244>
    11ac:	88 35       	cpi	r24, 0x58	; 88
    11ae:	79 f0       	breq	.+30     	; 0x11ce <vfprintf+0x260>
    11b0:	b5 c0       	rjmp	.+362    	; 0x131c <vfprintf+0x3ae>
    11b2:	80 37       	cpi	r24, 0x70	; 112
    11b4:	19 f0       	breq	.+6      	; 0x11bc <vfprintf+0x24e>
    11b6:	88 37       	cpi	r24, 0x78	; 120
    11b8:	21 f0       	breq	.+8      	; 0x11c2 <vfprintf+0x254>
    11ba:	b0 c0       	rjmp	.+352    	; 0x131c <vfprintf+0x3ae>
    11bc:	e9 2f       	mov	r30, r25
    11be:	e0 61       	ori	r30, 0x10	; 16
    11c0:	be 2e       	mov	r11, r30
    11c2:	b4 fe       	sbrs	r11, 4
    11c4:	0d c0       	rjmp	.+26     	; 0x11e0 <vfprintf+0x272>
    11c6:	fb 2d       	mov	r31, r11
    11c8:	f4 60       	ori	r31, 0x04	; 4
    11ca:	bf 2e       	mov	r11, r31
    11cc:	09 c0       	rjmp	.+18     	; 0x11e0 <vfprintf+0x272>
    11ce:	34 fe       	sbrs	r3, 4
    11d0:	0a c0       	rjmp	.+20     	; 0x11e6 <vfprintf+0x278>
    11d2:	29 2f       	mov	r18, r25
    11d4:	26 60       	ori	r18, 0x06	; 6
    11d6:	b2 2e       	mov	r11, r18
    11d8:	06 c0       	rjmp	.+12     	; 0x11e6 <vfprintf+0x278>
    11da:	28 e0       	ldi	r18, 0x08	; 8
    11dc:	30 e0       	ldi	r19, 0x00	; 0
    11de:	05 c0       	rjmp	.+10     	; 0x11ea <vfprintf+0x27c>
    11e0:	20 e1       	ldi	r18, 0x10	; 16
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	02 c0       	rjmp	.+4      	; 0x11ea <vfprintf+0x27c>
    11e6:	20 e1       	ldi	r18, 0x10	; 16
    11e8:	32 e0       	ldi	r19, 0x02	; 2
    11ea:	f8 01       	movw	r30, r16
    11ec:	b7 fe       	sbrs	r11, 7
    11ee:	07 c0       	rjmp	.+14     	; 0x11fe <vfprintf+0x290>
    11f0:	60 81       	ld	r22, Z
    11f2:	71 81       	ldd	r23, Z+1	; 0x01
    11f4:	82 81       	ldd	r24, Z+2	; 0x02
    11f6:	93 81       	ldd	r25, Z+3	; 0x03
    11f8:	0c 5f       	subi	r16, 0xFC	; 252
    11fa:	1f 4f       	sbci	r17, 0xFF	; 255
    11fc:	06 c0       	rjmp	.+12     	; 0x120a <vfprintf+0x29c>
    11fe:	60 81       	ld	r22, Z
    1200:	71 81       	ldd	r23, Z+1	; 0x01
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	0e 5f       	subi	r16, 0xFE	; 254
    1208:	1f 4f       	sbci	r17, 0xFF	; 255
    120a:	a3 01       	movw	r20, r6
    120c:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <__ultoa_invert>
    1210:	88 2e       	mov	r8, r24
    1212:	86 18       	sub	r8, r6
    1214:	fb 2d       	mov	r31, r11
    1216:	ff 77       	andi	r31, 0x7F	; 127
    1218:	3f 2e       	mov	r3, r31
    121a:	36 fe       	sbrs	r3, 6
    121c:	0d c0       	rjmp	.+26     	; 0x1238 <vfprintf+0x2ca>
    121e:	23 2d       	mov	r18, r3
    1220:	2e 7f       	andi	r18, 0xFE	; 254
    1222:	a2 2e       	mov	r10, r18
    1224:	89 14       	cp	r8, r9
    1226:	58 f4       	brcc	.+22     	; 0x123e <vfprintf+0x2d0>
    1228:	34 fe       	sbrs	r3, 4
    122a:	0b c0       	rjmp	.+22     	; 0x1242 <vfprintf+0x2d4>
    122c:	32 fc       	sbrc	r3, 2
    122e:	09 c0       	rjmp	.+18     	; 0x1242 <vfprintf+0x2d4>
    1230:	83 2d       	mov	r24, r3
    1232:	8e 7e       	andi	r24, 0xEE	; 238
    1234:	a8 2e       	mov	r10, r24
    1236:	05 c0       	rjmp	.+10     	; 0x1242 <vfprintf+0x2d4>
    1238:	b8 2c       	mov	r11, r8
    123a:	a3 2c       	mov	r10, r3
    123c:	03 c0       	rjmp	.+6      	; 0x1244 <vfprintf+0x2d6>
    123e:	b8 2c       	mov	r11, r8
    1240:	01 c0       	rjmp	.+2      	; 0x1244 <vfprintf+0x2d6>
    1242:	b9 2c       	mov	r11, r9
    1244:	a4 fe       	sbrs	r10, 4
    1246:	0f c0       	rjmp	.+30     	; 0x1266 <vfprintf+0x2f8>
    1248:	fe 01       	movw	r30, r28
    124a:	e8 0d       	add	r30, r8
    124c:	f1 1d       	adc	r31, r1
    124e:	80 81       	ld	r24, Z
    1250:	80 33       	cpi	r24, 0x30	; 48
    1252:	21 f4       	brne	.+8      	; 0x125c <vfprintf+0x2ee>
    1254:	9a 2d       	mov	r25, r10
    1256:	99 7e       	andi	r25, 0xE9	; 233
    1258:	a9 2e       	mov	r10, r25
    125a:	09 c0       	rjmp	.+18     	; 0x126e <vfprintf+0x300>
    125c:	a2 fe       	sbrs	r10, 2
    125e:	06 c0       	rjmp	.+12     	; 0x126c <vfprintf+0x2fe>
    1260:	b3 94       	inc	r11
    1262:	b3 94       	inc	r11
    1264:	04 c0       	rjmp	.+8      	; 0x126e <vfprintf+0x300>
    1266:	8a 2d       	mov	r24, r10
    1268:	86 78       	andi	r24, 0x86	; 134
    126a:	09 f0       	breq	.+2      	; 0x126e <vfprintf+0x300>
    126c:	b3 94       	inc	r11
    126e:	a3 fc       	sbrc	r10, 3
    1270:	11 c0       	rjmp	.+34     	; 0x1294 <vfprintf+0x326>
    1272:	a0 fe       	sbrs	r10, 0
    1274:	06 c0       	rjmp	.+12     	; 0x1282 <vfprintf+0x314>
    1276:	b2 14       	cp	r11, r2
    1278:	88 f4       	brcc	.+34     	; 0x129c <vfprintf+0x32e>
    127a:	28 0c       	add	r2, r8
    127c:	92 2c       	mov	r9, r2
    127e:	9b 18       	sub	r9, r11
    1280:	0e c0       	rjmp	.+28     	; 0x129e <vfprintf+0x330>
    1282:	b2 14       	cp	r11, r2
    1284:	60 f4       	brcc	.+24     	; 0x129e <vfprintf+0x330>
    1286:	b6 01       	movw	r22, r12
    1288:	80 e2       	ldi	r24, 0x20	; 32
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	0e 94 1d 0b 	call	0x163a	; 0x163a <fputc>
    1290:	b3 94       	inc	r11
    1292:	f7 cf       	rjmp	.-18     	; 0x1282 <vfprintf+0x314>
    1294:	b2 14       	cp	r11, r2
    1296:	18 f4       	brcc	.+6      	; 0x129e <vfprintf+0x330>
    1298:	2b 18       	sub	r2, r11
    129a:	02 c0       	rjmp	.+4      	; 0x12a0 <vfprintf+0x332>
    129c:	98 2c       	mov	r9, r8
    129e:	21 2c       	mov	r2, r1
    12a0:	a4 fe       	sbrs	r10, 4
    12a2:	10 c0       	rjmp	.+32     	; 0x12c4 <vfprintf+0x356>
    12a4:	b6 01       	movw	r22, r12
    12a6:	80 e3       	ldi	r24, 0x30	; 48
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	0e 94 1d 0b 	call	0x163a	; 0x163a <fputc>
    12ae:	a2 fe       	sbrs	r10, 2
    12b0:	17 c0       	rjmp	.+46     	; 0x12e0 <vfprintf+0x372>
    12b2:	a1 fc       	sbrc	r10, 1
    12b4:	03 c0       	rjmp	.+6      	; 0x12bc <vfprintf+0x34e>
    12b6:	88 e7       	ldi	r24, 0x78	; 120
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	02 c0       	rjmp	.+4      	; 0x12c0 <vfprintf+0x352>
    12bc:	88 e5       	ldi	r24, 0x58	; 88
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	b6 01       	movw	r22, r12
    12c2:	0c c0       	rjmp	.+24     	; 0x12dc <vfprintf+0x36e>
    12c4:	8a 2d       	mov	r24, r10
    12c6:	86 78       	andi	r24, 0x86	; 134
    12c8:	59 f0       	breq	.+22     	; 0x12e0 <vfprintf+0x372>
    12ca:	a1 fe       	sbrs	r10, 1
    12cc:	02 c0       	rjmp	.+4      	; 0x12d2 <vfprintf+0x364>
    12ce:	8b e2       	ldi	r24, 0x2B	; 43
    12d0:	01 c0       	rjmp	.+2      	; 0x12d4 <vfprintf+0x366>
    12d2:	80 e2       	ldi	r24, 0x20	; 32
    12d4:	a7 fc       	sbrc	r10, 7
    12d6:	8d e2       	ldi	r24, 0x2D	; 45
    12d8:	b6 01       	movw	r22, r12
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	0e 94 1d 0b 	call	0x163a	; 0x163a <fputc>
    12e0:	89 14       	cp	r8, r9
    12e2:	38 f4       	brcc	.+14     	; 0x12f2 <vfprintf+0x384>
    12e4:	b6 01       	movw	r22, r12
    12e6:	80 e3       	ldi	r24, 0x30	; 48
    12e8:	90 e0       	ldi	r25, 0x00	; 0
    12ea:	0e 94 1d 0b 	call	0x163a	; 0x163a <fputc>
    12ee:	9a 94       	dec	r9
    12f0:	f7 cf       	rjmp	.-18     	; 0x12e0 <vfprintf+0x372>
    12f2:	8a 94       	dec	r8
    12f4:	f3 01       	movw	r30, r6
    12f6:	e8 0d       	add	r30, r8
    12f8:	f1 1d       	adc	r31, r1
    12fa:	80 81       	ld	r24, Z
    12fc:	b6 01       	movw	r22, r12
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	0e 94 1d 0b 	call	0x163a	; 0x163a <fputc>
    1304:	81 10       	cpse	r8, r1
    1306:	f5 cf       	rjmp	.-22     	; 0x12f2 <vfprintf+0x384>
    1308:	22 20       	and	r2, r2
    130a:	09 f4       	brne	.+2      	; 0x130e <vfprintf+0x3a0>
    130c:	42 ce       	rjmp	.-892    	; 0xf92 <vfprintf+0x24>
    130e:	b6 01       	movw	r22, r12
    1310:	80 e2       	ldi	r24, 0x20	; 32
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	0e 94 1d 0b 	call	0x163a	; 0x163a <fputc>
    1318:	2a 94       	dec	r2
    131a:	f6 cf       	rjmp	.-20     	; 0x1308 <vfprintf+0x39a>
    131c:	f6 01       	movw	r30, r12
    131e:	86 81       	ldd	r24, Z+6	; 0x06
    1320:	97 81       	ldd	r25, Z+7	; 0x07
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <vfprintf+0x3ba>
    1324:	8f ef       	ldi	r24, 0xFF	; 255
    1326:	9f ef       	ldi	r25, 0xFF	; 255
    1328:	2b 96       	adiw	r28, 0x0b	; 11
    132a:	e2 e1       	ldi	r30, 0x12	; 18
    132c:	0c 94 1e 0c 	jmp	0x183c	; 0x183c <__epilogue_restores__>

00001330 <strtod>:
    1330:	a0 e0       	ldi	r26, 0x00	; 0
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	ee e9       	ldi	r30, 0x9E	; 158
    1336:	f9 e0       	ldi	r31, 0x09	; 9
    1338:	0c 94 08 0c 	jmp	0x1810	; 0x1810 <__prologue_saves__+0xc>
    133c:	ec 01       	movw	r28, r24
    133e:	6b 01       	movw	r12, r22
    1340:	61 15       	cp	r22, r1
    1342:	71 05       	cpc	r23, r1
    1344:	19 f0       	breq	.+6      	; 0x134c <strtod+0x1c>
    1346:	fb 01       	movw	r30, r22
    1348:	91 83       	std	Z+1, r25	; 0x01
    134a:	80 83       	st	Z, r24
    134c:	7e 01       	movw	r14, r28
    134e:	ff ef       	ldi	r31, 0xFF	; 255
    1350:	ef 1a       	sub	r14, r31
    1352:	ff 0a       	sbc	r15, r31
    1354:	08 81       	ld	r16, Y
    1356:	80 2f       	mov	r24, r16
    1358:	90 e0       	ldi	r25, 0x00	; 0
    135a:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <isspace>
    135e:	89 2b       	or	r24, r25
    1360:	11 f0       	breq	.+4      	; 0x1366 <strtod+0x36>
    1362:	e7 01       	movw	r28, r14
    1364:	f3 cf       	rjmp	.-26     	; 0x134c <strtod+0x1c>
    1366:	0d 32       	cpi	r16, 0x2D	; 45
    1368:	39 f4       	brne	.+14     	; 0x1378 <strtod+0x48>
    136a:	7e 01       	movw	r14, r28
    136c:	82 e0       	ldi	r24, 0x02	; 2
    136e:	e8 0e       	add	r14, r24
    1370:	f1 1c       	adc	r15, r1
    1372:	09 81       	ldd	r16, Y+1	; 0x01
    1374:	11 e0       	ldi	r17, 0x01	; 1
    1376:	08 c0       	rjmp	.+16     	; 0x1388 <strtod+0x58>
    1378:	0b 32       	cpi	r16, 0x2B	; 43
    137a:	29 f4       	brne	.+10     	; 0x1386 <strtod+0x56>
    137c:	7e 01       	movw	r14, r28
    137e:	92 e0       	ldi	r25, 0x02	; 2
    1380:	e9 0e       	add	r14, r25
    1382:	f1 1c       	adc	r15, r1
    1384:	09 81       	ldd	r16, Y+1	; 0x01
    1386:	10 e0       	ldi	r17, 0x00	; 0
    1388:	e7 01       	movw	r28, r14
    138a:	21 97       	sbiw	r28, 0x01	; 1
    138c:	43 e0       	ldi	r20, 0x03	; 3
    138e:	50 e0       	ldi	r21, 0x00	; 0
    1390:	6c e5       	ldi	r22, 0x5C	; 92
    1392:	70 e0       	ldi	r23, 0x00	; 0
    1394:	ce 01       	movw	r24, r28
    1396:	0e 94 ef 0a 	call	0x15de	; 0x15de <strncasecmp_P>
    139a:	89 2b       	or	r24, r25
    139c:	c1 f4       	brne	.+48     	; 0x13ce <strtod+0x9e>
    139e:	23 96       	adiw	r28, 0x03	; 3
    13a0:	45 e0       	ldi	r20, 0x05	; 5
    13a2:	50 e0       	ldi	r21, 0x00	; 0
    13a4:	67 e5       	ldi	r22, 0x57	; 87
    13a6:	70 e0       	ldi	r23, 0x00	; 0
    13a8:	ce 01       	movw	r24, r28
    13aa:	0e 94 ef 0a 	call	0x15de	; 0x15de <strncasecmp_P>
    13ae:	89 2b       	or	r24, r25
    13b0:	09 f4       	brne	.+2      	; 0x13b4 <strtod+0x84>
    13b2:	25 96       	adiw	r28, 0x05	; 5
    13b4:	c1 14       	cp	r12, r1
    13b6:	d1 04       	cpc	r13, r1
    13b8:	19 f0       	breq	.+6      	; 0x13c0 <strtod+0x90>
    13ba:	f6 01       	movw	r30, r12
    13bc:	d1 83       	std	Z+1, r29	; 0x01
    13be:	c0 83       	st	Z, r28
    13c0:	11 11       	cpse	r17, r1
    13c2:	f6 c0       	rjmp	.+492    	; 0x15b0 <strtod+0x280>
    13c4:	60 e0       	ldi	r22, 0x00	; 0
    13c6:	70 e0       	ldi	r23, 0x00	; 0
    13c8:	80 e8       	ldi	r24, 0x80	; 128
    13ca:	9f e7       	ldi	r25, 0x7F	; 127
    13cc:	fa c0       	rjmp	.+500    	; 0x15c2 <strtod+0x292>
    13ce:	43 e0       	ldi	r20, 0x03	; 3
    13d0:	50 e0       	ldi	r21, 0x00	; 0
    13d2:	64 e5       	ldi	r22, 0x54	; 84
    13d4:	70 e0       	ldi	r23, 0x00	; 0
    13d6:	ce 01       	movw	r24, r28
    13d8:	0e 94 ef 0a 	call	0x15de	; 0x15de <strncasecmp_P>
    13dc:	89 2b       	or	r24, r25
    13de:	59 f4       	brne	.+22     	; 0x13f6 <strtod+0xc6>
    13e0:	c1 14       	cp	r12, r1
    13e2:	d1 04       	cpc	r13, r1
    13e4:	09 f4       	brne	.+2      	; 0x13e8 <strtod+0xb8>
    13e6:	e9 c0       	rjmp	.+466    	; 0x15ba <strtod+0x28a>
    13e8:	f2 e0       	ldi	r31, 0x02	; 2
    13ea:	ef 0e       	add	r14, r31
    13ec:	f1 1c       	adc	r15, r1
    13ee:	f6 01       	movw	r30, r12
    13f0:	f1 82       	std	Z+1, r15	; 0x01
    13f2:	e0 82       	st	Z, r14
    13f4:	e2 c0       	rjmp	.+452    	; 0x15ba <strtod+0x28a>
    13f6:	20 e0       	ldi	r18, 0x00	; 0
    13f8:	30 e0       	ldi	r19, 0x00	; 0
    13fa:	a9 01       	movw	r20, r18
    13fc:	c0 e0       	ldi	r28, 0x00	; 0
    13fe:	d0 e0       	ldi	r29, 0x00	; 0
    1400:	f7 01       	movw	r30, r14
    1402:	80 ed       	ldi	r24, 0xD0	; 208
    1404:	a8 2e       	mov	r10, r24
    1406:	a0 0e       	add	r10, r16
    1408:	89 e0       	ldi	r24, 0x09	; 9
    140a:	8a 15       	cp	r24, r10
    140c:	30 f1       	brcs	.+76     	; 0x145a <strtod+0x12a>
    140e:	91 2f       	mov	r25, r17
    1410:	92 60       	ori	r25, 0x02	; 2
    1412:	b9 2e       	mov	r11, r25
    1414:	81 2f       	mov	r24, r17
    1416:	88 70       	andi	r24, 0x08	; 8
    1418:	12 ff       	sbrs	r17, 2
    141a:	04 c0       	rjmp	.+8      	; 0x1424 <strtod+0xf4>
    141c:	81 11       	cpse	r24, r1
    141e:	24 c0       	rjmp	.+72     	; 0x1468 <strtod+0x138>
    1420:	21 96       	adiw	r28, 0x01	; 1
    1422:	22 c0       	rjmp	.+68     	; 0x1468 <strtod+0x138>
    1424:	81 11       	cpse	r24, r1
    1426:	21 97       	sbiw	r28, 0x01	; 1
    1428:	a5 e0       	ldi	r26, 0x05	; 5
    142a:	b0 e0       	ldi	r27, 0x00	; 0
    142c:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <__muluhisi3>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	88 0f       	add	r24, r24
    1436:	99 1f       	adc	r25, r25
    1438:	aa 1f       	adc	r26, r26
    143a:	bb 1f       	adc	r27, r27
    143c:	9c 01       	movw	r18, r24
    143e:	ad 01       	movw	r20, r26
    1440:	2a 0d       	add	r18, r10
    1442:	31 1d       	adc	r19, r1
    1444:	41 1d       	adc	r20, r1
    1446:	51 1d       	adc	r21, r1
    1448:	28 39       	cpi	r18, 0x98	; 152
    144a:	89 e9       	ldi	r24, 0x99	; 153
    144c:	38 07       	cpc	r19, r24
    144e:	48 07       	cpc	r20, r24
    1450:	89 e1       	ldi	r24, 0x19	; 25
    1452:	58 07       	cpc	r21, r24
    1454:	48 f0       	brcs	.+18     	; 0x1468 <strtod+0x138>
    1456:	16 60       	ori	r17, 0x06	; 6
    1458:	06 c0       	rjmp	.+12     	; 0x1466 <strtod+0x136>
    145a:	9e ef       	ldi	r25, 0xFE	; 254
    145c:	a9 12       	cpse	r10, r25
    145e:	0a c0       	rjmp	.+20     	; 0x1474 <strtod+0x144>
    1460:	13 fd       	sbrc	r17, 3
    1462:	40 c0       	rjmp	.+128    	; 0x14e4 <strtod+0x1b4>
    1464:	18 60       	ori	r17, 0x08	; 8
    1466:	b1 2e       	mov	r11, r17
    1468:	8f ef       	ldi	r24, 0xFF	; 255
    146a:	e8 1a       	sub	r14, r24
    146c:	f8 0a       	sbc	r15, r24
    146e:	00 81       	ld	r16, Z
    1470:	1b 2d       	mov	r17, r11
    1472:	c6 cf       	rjmp	.-116    	; 0x1400 <strtod+0xd0>
    1474:	80 2f       	mov	r24, r16
    1476:	8f 7d       	andi	r24, 0xDF	; 223
    1478:	85 34       	cpi	r24, 0x45	; 69
    147a:	a1 f5       	brne	.+104    	; 0x14e4 <strtod+0x1b4>
    147c:	80 81       	ld	r24, Z
    147e:	8d 32       	cpi	r24, 0x2D	; 45
    1480:	11 f4       	brne	.+4      	; 0x1486 <strtod+0x156>
    1482:	10 61       	ori	r17, 0x10	; 16
    1484:	06 c0       	rjmp	.+12     	; 0x1492 <strtod+0x162>
    1486:	8b 32       	cpi	r24, 0x2B	; 43
    1488:	21 f0       	breq	.+8      	; 0x1492 <strtod+0x162>
    148a:	31 96       	adiw	r30, 0x01	; 1
    148c:	61 e0       	ldi	r22, 0x01	; 1
    148e:	70 e0       	ldi	r23, 0x00	; 0
    1490:	04 c0       	rjmp	.+8      	; 0x149a <strtod+0x16a>
    1492:	81 81       	ldd	r24, Z+1	; 0x01
    1494:	32 96       	adiw	r30, 0x02	; 2
    1496:	62 e0       	ldi	r22, 0x02	; 2
    1498:	70 e0       	ldi	r23, 0x00	; 0
    149a:	80 53       	subi	r24, 0x30	; 48
    149c:	8a 30       	cpi	r24, 0x0A	; 10
    149e:	18 f0       	brcs	.+6      	; 0x14a6 <strtod+0x176>
    14a0:	e6 1b       	sub	r30, r22
    14a2:	f7 0b       	sbc	r31, r23
    14a4:	1f c0       	rjmp	.+62     	; 0x14e4 <strtod+0x1b4>
    14a6:	60 e0       	ldi	r22, 0x00	; 0
    14a8:	70 e0       	ldi	r23, 0x00	; 0
    14aa:	60 38       	cpi	r22, 0x80	; 128
    14ac:	9c e0       	ldi	r25, 0x0C	; 12
    14ae:	79 07       	cpc	r23, r25
    14b0:	5c f4       	brge	.+22     	; 0x14c8 <strtod+0x198>
    14b2:	db 01       	movw	r26, r22
    14b4:	aa 0f       	add	r26, r26
    14b6:	bb 1f       	adc	r27, r27
    14b8:	aa 0f       	add	r26, r26
    14ba:	bb 1f       	adc	r27, r27
    14bc:	6a 0f       	add	r22, r26
    14be:	7b 1f       	adc	r23, r27
    14c0:	66 0f       	add	r22, r22
    14c2:	77 1f       	adc	r23, r23
    14c4:	68 0f       	add	r22, r24
    14c6:	71 1d       	adc	r23, r1
    14c8:	31 96       	adiw	r30, 0x01	; 1
    14ca:	df 01       	movw	r26, r30
    14cc:	11 97       	sbiw	r26, 0x01	; 1
    14ce:	8c 91       	ld	r24, X
    14d0:	80 53       	subi	r24, 0x30	; 48
    14d2:	8a 30       	cpi	r24, 0x0A	; 10
    14d4:	50 f3       	brcs	.-44     	; 0x14aa <strtod+0x17a>
    14d6:	14 ff       	sbrs	r17, 4
    14d8:	03 c0       	rjmp	.+6      	; 0x14e0 <strtod+0x1b0>
    14da:	71 95       	neg	r23
    14dc:	61 95       	neg	r22
    14de:	71 09       	sbc	r23, r1
    14e0:	c6 0f       	add	r28, r22
    14e2:	d7 1f       	adc	r29, r23
    14e4:	11 ff       	sbrs	r17, 1
    14e6:	08 c0       	rjmp	.+16     	; 0x14f8 <strtod+0x1c8>
    14e8:	c1 14       	cp	r12, r1
    14ea:	d1 04       	cpc	r13, r1
    14ec:	29 f0       	breq	.+10     	; 0x14f8 <strtod+0x1c8>
    14ee:	cf 01       	movw	r24, r30
    14f0:	01 97       	sbiw	r24, 0x01	; 1
    14f2:	f6 01       	movw	r30, r12
    14f4:	91 83       	std	Z+1, r25	; 0x01
    14f6:	80 83       	st	Z, r24
    14f8:	ca 01       	movw	r24, r20
    14fa:	b9 01       	movw	r22, r18
    14fc:	0e 94 b7 0b 	call	0x176e	; 0x176e <__floatunsisf>
    1500:	21 2f       	mov	r18, r17
    1502:	23 70       	andi	r18, 0x03	; 3
    1504:	23 30       	cpi	r18, 0x03	; 3
    1506:	19 f0       	breq	.+6      	; 0x150e <strtod+0x1de>
    1508:	4b 01       	movw	r8, r22
    150a:	5c 01       	movw	r10, r24
    150c:	06 c0       	rjmp	.+12     	; 0x151a <strtod+0x1ea>
    150e:	4b 01       	movw	r8, r22
    1510:	5c 01       	movw	r10, r24
    1512:	b7 fa       	bst	r11, 7
    1514:	b0 94       	com	r11
    1516:	b7 f8       	bld	r11, 7
    1518:	b0 94       	com	r11
    151a:	20 e0       	ldi	r18, 0x00	; 0
    151c:	30 e0       	ldi	r19, 0x00	; 0
    151e:	a9 01       	movw	r20, r18
    1520:	c5 01       	movw	r24, r10
    1522:	b4 01       	movw	r22, r8
    1524:	0e 94 7f 05 	call	0xafe	; 0xafe <__cmpsf2>
    1528:	88 23       	and	r24, r24
    152a:	09 f4       	brne	.+2      	; 0x152e <strtod+0x1fe>
    152c:	3e c0       	rjmp	.+124    	; 0x15aa <strtod+0x27a>
    152e:	d7 ff       	sbrs	r29, 7
    1530:	06 c0       	rjmp	.+12     	; 0x153e <strtod+0x20e>
    1532:	d1 95       	neg	r29
    1534:	c1 95       	neg	r28
    1536:	d1 09       	sbc	r29, r1
    1538:	03 e7       	ldi	r16, 0x73	; 115
    153a:	10 e0       	ldi	r17, 0x00	; 0
    153c:	02 c0       	rjmp	.+4      	; 0x1542 <strtod+0x212>
    153e:	0b e8       	ldi	r16, 0x8B	; 139
    1540:	10 e0       	ldi	r17, 0x00	; 0
    1542:	68 01       	movw	r12, r16
    1544:	f8 e1       	ldi	r31, 0x18	; 24
    1546:	cf 1a       	sub	r12, r31
    1548:	d1 08       	sbc	r13, r1
    154a:	90 e2       	ldi	r25, 0x20	; 32
    154c:	e9 2e       	mov	r14, r25
    154e:	f1 2c       	mov	r15, r1
    1550:	ce 15       	cp	r28, r14
    1552:	df 05       	cpc	r29, r15
    1554:	74 f0       	brlt	.+28     	; 0x1572 <strtod+0x242>
    1556:	f8 01       	movw	r30, r16
    1558:	25 91       	lpm	r18, Z+
    155a:	35 91       	lpm	r19, Z+
    155c:	45 91       	lpm	r20, Z+
    155e:	54 91       	lpm	r21, Z
    1560:	c5 01       	movw	r24, r10
    1562:	b4 01       	movw	r22, r8
    1564:	0e 94 a6 06 	call	0xd4c	; 0xd4c <__mulsf3>
    1568:	4b 01       	movw	r8, r22
    156a:	5c 01       	movw	r10, r24
    156c:	ce 19       	sub	r28, r14
    156e:	df 09       	sbc	r29, r15
    1570:	ef cf       	rjmp	.-34     	; 0x1550 <strtod+0x220>
    1572:	04 50       	subi	r16, 0x04	; 4
    1574:	11 09       	sbc	r17, r1
    1576:	f5 94       	asr	r15
    1578:	e7 94       	ror	r14
    157a:	0c 15       	cp	r16, r12
    157c:	1d 05       	cpc	r17, r13
    157e:	41 f7       	brne	.-48     	; 0x1550 <strtod+0x220>
    1580:	8a 2d       	mov	r24, r10
    1582:	88 0f       	add	r24, r24
    1584:	8b 2d       	mov	r24, r11
    1586:	88 1f       	adc	r24, r24
    1588:	8f 3f       	cpi	r24, 0xFF	; 255
    158a:	49 f0       	breq	.+18     	; 0x159e <strtod+0x26e>
    158c:	20 e0       	ldi	r18, 0x00	; 0
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	a9 01       	movw	r20, r18
    1592:	c5 01       	movw	r24, r10
    1594:	b4 01       	movw	r22, r8
    1596:	0e 94 7f 05 	call	0xafe	; 0xafe <__cmpsf2>
    159a:	81 11       	cpse	r24, r1
    159c:	06 c0       	rjmp	.+12     	; 0x15aa <strtod+0x27a>
    159e:	82 e2       	ldi	r24, 0x22	; 34
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	90 93 a1 00 	sts	0x00A1, r25	; 0x8000a1 <__data_end+0x1>
    15a6:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__data_end>
    15aa:	c5 01       	movw	r24, r10
    15ac:	b4 01       	movw	r22, r8
    15ae:	09 c0       	rjmp	.+18     	; 0x15c2 <strtod+0x292>
    15b0:	60 e0       	ldi	r22, 0x00	; 0
    15b2:	70 e0       	ldi	r23, 0x00	; 0
    15b4:	80 e8       	ldi	r24, 0x80	; 128
    15b6:	9f ef       	ldi	r25, 0xFF	; 255
    15b8:	04 c0       	rjmp	.+8      	; 0x15c2 <strtod+0x292>
    15ba:	60 e0       	ldi	r22, 0x00	; 0
    15bc:	70 e0       	ldi	r23, 0x00	; 0
    15be:	80 ec       	ldi	r24, 0xC0	; 192
    15c0:	9f e7       	ldi	r25, 0x7F	; 127
    15c2:	cd b7       	in	r28, 0x3d	; 61
    15c4:	de b7       	in	r29, 0x3e	; 62
    15c6:	ec e0       	ldi	r30, 0x0C	; 12
    15c8:	0c 94 24 0c 	jmp	0x1848	; 0x1848 <__epilogue_restores__+0xc>

000015cc <isspace>:
    15cc:	91 11       	cpse	r25, r1
    15ce:	0c 94 f4 0b 	jmp	0x17e8	; 0x17e8 <__ctype_isfalse>
    15d2:	80 32       	cpi	r24, 0x20	; 32
    15d4:	19 f0       	breq	.+6      	; 0x15dc <isspace+0x10>
    15d6:	89 50       	subi	r24, 0x09	; 9
    15d8:	85 50       	subi	r24, 0x05	; 5
    15da:	c8 f7       	brcc	.-14     	; 0x15ce <isspace+0x2>
    15dc:	08 95       	ret

000015de <strncasecmp_P>:
    15de:	fb 01       	movw	r30, r22
    15e0:	dc 01       	movw	r26, r24
    15e2:	41 50       	subi	r20, 0x01	; 1
    15e4:	50 40       	sbci	r21, 0x00	; 0
    15e6:	88 f0       	brcs	.+34     	; 0x160a <strncasecmp_P+0x2c>
    15e8:	8d 91       	ld	r24, X+
    15ea:	81 34       	cpi	r24, 0x41	; 65
    15ec:	1c f0       	brlt	.+6      	; 0x15f4 <strncasecmp_P+0x16>
    15ee:	8b 35       	cpi	r24, 0x5B	; 91
    15f0:	0c f4       	brge	.+2      	; 0x15f4 <strncasecmp_P+0x16>
    15f2:	80 5e       	subi	r24, 0xE0	; 224
    15f4:	65 91       	lpm	r22, Z+
    15f6:	61 34       	cpi	r22, 0x41	; 65
    15f8:	1c f0       	brlt	.+6      	; 0x1600 <strncasecmp_P+0x22>
    15fa:	6b 35       	cpi	r22, 0x5B	; 91
    15fc:	0c f4       	brge	.+2      	; 0x1600 <strncasecmp_P+0x22>
    15fe:	60 5e       	subi	r22, 0xE0	; 224
    1600:	86 1b       	sub	r24, r22
    1602:	61 11       	cpse	r22, r1
    1604:	71 f3       	breq	.-36     	; 0x15e2 <strncasecmp_P+0x4>
    1606:	99 0b       	sbc	r25, r25
    1608:	08 95       	ret
    160a:	88 1b       	sub	r24, r24
    160c:	fc cf       	rjmp	.-8      	; 0x1606 <strncasecmp_P+0x28>

0000160e <strnlen_P>:
    160e:	fc 01       	movw	r30, r24
    1610:	05 90       	lpm	r0, Z+
    1612:	61 50       	subi	r22, 0x01	; 1
    1614:	70 40       	sbci	r23, 0x00	; 0
    1616:	01 10       	cpse	r0, r1
    1618:	d8 f7       	brcc	.-10     	; 0x1610 <strnlen_P+0x2>
    161a:	80 95       	com	r24
    161c:	90 95       	com	r25
    161e:	8e 0f       	add	r24, r30
    1620:	9f 1f       	adc	r25, r31
    1622:	08 95       	ret

00001624 <strnlen>:
    1624:	fc 01       	movw	r30, r24
    1626:	61 50       	subi	r22, 0x01	; 1
    1628:	70 40       	sbci	r23, 0x00	; 0
    162a:	01 90       	ld	r0, Z+
    162c:	01 10       	cpse	r0, r1
    162e:	d8 f7       	brcc	.-10     	; 0x1626 <strnlen+0x2>
    1630:	80 95       	com	r24
    1632:	90 95       	com	r25
    1634:	8e 0f       	add	r24, r30
    1636:	9f 1f       	adc	r25, r31
    1638:	08 95       	ret

0000163a <fputc>:
    163a:	0f 93       	push	r16
    163c:	1f 93       	push	r17
    163e:	cf 93       	push	r28
    1640:	df 93       	push	r29
    1642:	fb 01       	movw	r30, r22
    1644:	23 81       	ldd	r18, Z+3	; 0x03
    1646:	21 fd       	sbrc	r18, 1
    1648:	03 c0       	rjmp	.+6      	; 0x1650 <fputc+0x16>
    164a:	8f ef       	ldi	r24, 0xFF	; 255
    164c:	9f ef       	ldi	r25, 0xFF	; 255
    164e:	2c c0       	rjmp	.+88     	; 0x16a8 <fputc+0x6e>
    1650:	22 ff       	sbrs	r18, 2
    1652:	16 c0       	rjmp	.+44     	; 0x1680 <fputc+0x46>
    1654:	46 81       	ldd	r20, Z+6	; 0x06
    1656:	57 81       	ldd	r21, Z+7	; 0x07
    1658:	24 81       	ldd	r18, Z+4	; 0x04
    165a:	35 81       	ldd	r19, Z+5	; 0x05
    165c:	42 17       	cp	r20, r18
    165e:	53 07       	cpc	r21, r19
    1660:	44 f4       	brge	.+16     	; 0x1672 <fputc+0x38>
    1662:	a0 81       	ld	r26, Z
    1664:	b1 81       	ldd	r27, Z+1	; 0x01
    1666:	9d 01       	movw	r18, r26
    1668:	2f 5f       	subi	r18, 0xFF	; 255
    166a:	3f 4f       	sbci	r19, 0xFF	; 255
    166c:	31 83       	std	Z+1, r19	; 0x01
    166e:	20 83       	st	Z, r18
    1670:	8c 93       	st	X, r24
    1672:	26 81       	ldd	r18, Z+6	; 0x06
    1674:	37 81       	ldd	r19, Z+7	; 0x07
    1676:	2f 5f       	subi	r18, 0xFF	; 255
    1678:	3f 4f       	sbci	r19, 0xFF	; 255
    167a:	37 83       	std	Z+7, r19	; 0x07
    167c:	26 83       	std	Z+6, r18	; 0x06
    167e:	14 c0       	rjmp	.+40     	; 0x16a8 <fputc+0x6e>
    1680:	8b 01       	movw	r16, r22
    1682:	ec 01       	movw	r28, r24
    1684:	fb 01       	movw	r30, r22
    1686:	00 84       	ldd	r0, Z+8	; 0x08
    1688:	f1 85       	ldd	r31, Z+9	; 0x09
    168a:	e0 2d       	mov	r30, r0
    168c:	09 95       	icall
    168e:	89 2b       	or	r24, r25
    1690:	e1 f6       	brne	.-72     	; 0x164a <fputc+0x10>
    1692:	d8 01       	movw	r26, r16
    1694:	16 96       	adiw	r26, 0x06	; 6
    1696:	8d 91       	ld	r24, X+
    1698:	9c 91       	ld	r25, X
    169a:	17 97       	sbiw	r26, 0x07	; 7
    169c:	01 96       	adiw	r24, 0x01	; 1
    169e:	17 96       	adiw	r26, 0x07	; 7
    16a0:	9c 93       	st	X, r25
    16a2:	8e 93       	st	-X, r24
    16a4:	16 97       	sbiw	r26, 0x06	; 6
    16a6:	ce 01       	movw	r24, r28
    16a8:	df 91       	pop	r29
    16aa:	cf 91       	pop	r28
    16ac:	1f 91       	pop	r17
    16ae:	0f 91       	pop	r16
    16b0:	08 95       	ret

000016b2 <__ultoa_invert>:
    16b2:	fa 01       	movw	r30, r20
    16b4:	aa 27       	eor	r26, r26
    16b6:	28 30       	cpi	r18, 0x08	; 8
    16b8:	51 f1       	breq	.+84     	; 0x170e <__ultoa_invert+0x5c>
    16ba:	20 31       	cpi	r18, 0x10	; 16
    16bc:	81 f1       	breq	.+96     	; 0x171e <__ultoa_invert+0x6c>
    16be:	e8 94       	clt
    16c0:	6f 93       	push	r22
    16c2:	6e 7f       	andi	r22, 0xFE	; 254
    16c4:	6e 5f       	subi	r22, 0xFE	; 254
    16c6:	7f 4f       	sbci	r23, 0xFF	; 255
    16c8:	8f 4f       	sbci	r24, 0xFF	; 255
    16ca:	9f 4f       	sbci	r25, 0xFF	; 255
    16cc:	af 4f       	sbci	r26, 0xFF	; 255
    16ce:	b1 e0       	ldi	r27, 0x01	; 1
    16d0:	3e d0       	rcall	.+124    	; 0x174e <__ultoa_invert+0x9c>
    16d2:	b4 e0       	ldi	r27, 0x04	; 4
    16d4:	3c d0       	rcall	.+120    	; 0x174e <__ultoa_invert+0x9c>
    16d6:	67 0f       	add	r22, r23
    16d8:	78 1f       	adc	r23, r24
    16da:	89 1f       	adc	r24, r25
    16dc:	9a 1f       	adc	r25, r26
    16de:	a1 1d       	adc	r26, r1
    16e0:	68 0f       	add	r22, r24
    16e2:	79 1f       	adc	r23, r25
    16e4:	8a 1f       	adc	r24, r26
    16e6:	91 1d       	adc	r25, r1
    16e8:	a1 1d       	adc	r26, r1
    16ea:	6a 0f       	add	r22, r26
    16ec:	71 1d       	adc	r23, r1
    16ee:	81 1d       	adc	r24, r1
    16f0:	91 1d       	adc	r25, r1
    16f2:	a1 1d       	adc	r26, r1
    16f4:	20 d0       	rcall	.+64     	; 0x1736 <__ultoa_invert+0x84>
    16f6:	09 f4       	brne	.+2      	; 0x16fa <__ultoa_invert+0x48>
    16f8:	68 94       	set
    16fa:	3f 91       	pop	r19
    16fc:	2a e0       	ldi	r18, 0x0A	; 10
    16fe:	26 9f       	mul	r18, r22
    1700:	11 24       	eor	r1, r1
    1702:	30 19       	sub	r19, r0
    1704:	30 5d       	subi	r19, 0xD0	; 208
    1706:	31 93       	st	Z+, r19
    1708:	de f6       	brtc	.-74     	; 0x16c0 <__ultoa_invert+0xe>
    170a:	cf 01       	movw	r24, r30
    170c:	08 95       	ret
    170e:	46 2f       	mov	r20, r22
    1710:	47 70       	andi	r20, 0x07	; 7
    1712:	40 5d       	subi	r20, 0xD0	; 208
    1714:	41 93       	st	Z+, r20
    1716:	b3 e0       	ldi	r27, 0x03	; 3
    1718:	0f d0       	rcall	.+30     	; 0x1738 <__ultoa_invert+0x86>
    171a:	c9 f7       	brne	.-14     	; 0x170e <__ultoa_invert+0x5c>
    171c:	f6 cf       	rjmp	.-20     	; 0x170a <__ultoa_invert+0x58>
    171e:	46 2f       	mov	r20, r22
    1720:	4f 70       	andi	r20, 0x0F	; 15
    1722:	40 5d       	subi	r20, 0xD0	; 208
    1724:	4a 33       	cpi	r20, 0x3A	; 58
    1726:	18 f0       	brcs	.+6      	; 0x172e <__ultoa_invert+0x7c>
    1728:	49 5d       	subi	r20, 0xD9	; 217
    172a:	31 fd       	sbrc	r19, 1
    172c:	40 52       	subi	r20, 0x20	; 32
    172e:	41 93       	st	Z+, r20
    1730:	02 d0       	rcall	.+4      	; 0x1736 <__ultoa_invert+0x84>
    1732:	a9 f7       	brne	.-22     	; 0x171e <__ultoa_invert+0x6c>
    1734:	ea cf       	rjmp	.-44     	; 0x170a <__ultoa_invert+0x58>
    1736:	b4 e0       	ldi	r27, 0x04	; 4
    1738:	a6 95       	lsr	r26
    173a:	97 95       	ror	r25
    173c:	87 95       	ror	r24
    173e:	77 95       	ror	r23
    1740:	67 95       	ror	r22
    1742:	ba 95       	dec	r27
    1744:	c9 f7       	brne	.-14     	; 0x1738 <__ultoa_invert+0x86>
    1746:	00 97       	sbiw	r24, 0x00	; 0
    1748:	61 05       	cpc	r22, r1
    174a:	71 05       	cpc	r23, r1
    174c:	08 95       	ret
    174e:	9b 01       	movw	r18, r22
    1750:	ac 01       	movw	r20, r24
    1752:	0a 2e       	mov	r0, r26
    1754:	06 94       	lsr	r0
    1756:	57 95       	ror	r21
    1758:	47 95       	ror	r20
    175a:	37 95       	ror	r19
    175c:	27 95       	ror	r18
    175e:	ba 95       	dec	r27
    1760:	c9 f7       	brne	.-14     	; 0x1754 <__ultoa_invert+0xa2>
    1762:	62 0f       	add	r22, r18
    1764:	73 1f       	adc	r23, r19
    1766:	84 1f       	adc	r24, r20
    1768:	95 1f       	adc	r25, r21
    176a:	a0 1d       	adc	r26, r0
    176c:	08 95       	ret

0000176e <__floatunsisf>:
    176e:	e8 94       	clt
    1770:	09 c0       	rjmp	.+18     	; 0x1784 <__floatsisf+0x12>

00001772 <__floatsisf>:
    1772:	97 fb       	bst	r25, 7
    1774:	3e f4       	brtc	.+14     	; 0x1784 <__floatsisf+0x12>
    1776:	90 95       	com	r25
    1778:	80 95       	com	r24
    177a:	70 95       	com	r23
    177c:	61 95       	neg	r22
    177e:	7f 4f       	sbci	r23, 0xFF	; 255
    1780:	8f 4f       	sbci	r24, 0xFF	; 255
    1782:	9f 4f       	sbci	r25, 0xFF	; 255
    1784:	99 23       	and	r25, r25
    1786:	a9 f0       	breq	.+42     	; 0x17b2 <__floatsisf+0x40>
    1788:	f9 2f       	mov	r31, r25
    178a:	96 e9       	ldi	r25, 0x96	; 150
    178c:	bb 27       	eor	r27, r27
    178e:	93 95       	inc	r25
    1790:	f6 95       	lsr	r31
    1792:	87 95       	ror	r24
    1794:	77 95       	ror	r23
    1796:	67 95       	ror	r22
    1798:	b7 95       	ror	r27
    179a:	f1 11       	cpse	r31, r1
    179c:	f8 cf       	rjmp	.-16     	; 0x178e <__floatsisf+0x1c>
    179e:	fa f4       	brpl	.+62     	; 0x17de <__floatsisf+0x6c>
    17a0:	bb 0f       	add	r27, r27
    17a2:	11 f4       	brne	.+4      	; 0x17a8 <__floatsisf+0x36>
    17a4:	60 ff       	sbrs	r22, 0
    17a6:	1b c0       	rjmp	.+54     	; 0x17de <__floatsisf+0x6c>
    17a8:	6f 5f       	subi	r22, 0xFF	; 255
    17aa:	7f 4f       	sbci	r23, 0xFF	; 255
    17ac:	8f 4f       	sbci	r24, 0xFF	; 255
    17ae:	9f 4f       	sbci	r25, 0xFF	; 255
    17b0:	16 c0       	rjmp	.+44     	; 0x17de <__floatsisf+0x6c>
    17b2:	88 23       	and	r24, r24
    17b4:	11 f0       	breq	.+4      	; 0x17ba <__floatsisf+0x48>
    17b6:	96 e9       	ldi	r25, 0x96	; 150
    17b8:	11 c0       	rjmp	.+34     	; 0x17dc <__floatsisf+0x6a>
    17ba:	77 23       	and	r23, r23
    17bc:	21 f0       	breq	.+8      	; 0x17c6 <__floatsisf+0x54>
    17be:	9e e8       	ldi	r25, 0x8E	; 142
    17c0:	87 2f       	mov	r24, r23
    17c2:	76 2f       	mov	r23, r22
    17c4:	05 c0       	rjmp	.+10     	; 0x17d0 <__floatsisf+0x5e>
    17c6:	66 23       	and	r22, r22
    17c8:	71 f0       	breq	.+28     	; 0x17e6 <__floatsisf+0x74>
    17ca:	96 e8       	ldi	r25, 0x86	; 134
    17cc:	86 2f       	mov	r24, r22
    17ce:	70 e0       	ldi	r23, 0x00	; 0
    17d0:	60 e0       	ldi	r22, 0x00	; 0
    17d2:	2a f0       	brmi	.+10     	; 0x17de <__floatsisf+0x6c>
    17d4:	9a 95       	dec	r25
    17d6:	66 0f       	add	r22, r22
    17d8:	77 1f       	adc	r23, r23
    17da:	88 1f       	adc	r24, r24
    17dc:	da f7       	brpl	.-10     	; 0x17d4 <__floatsisf+0x62>
    17de:	88 0f       	add	r24, r24
    17e0:	96 95       	lsr	r25
    17e2:	87 95       	ror	r24
    17e4:	97 f9       	bld	r25, 7
    17e6:	08 95       	ret

000017e8 <__ctype_isfalse>:
    17e8:	99 27       	eor	r25, r25
    17ea:	88 27       	eor	r24, r24

000017ec <__ctype_istrue>:
    17ec:	08 95       	ret

000017ee <__muluhisi3>:
    17ee:	0e 94 39 0c 	call	0x1872	; 0x1872 <__umulhisi3>
    17f2:	a5 9f       	mul	r26, r21
    17f4:	90 0d       	add	r25, r0
    17f6:	b4 9f       	mul	r27, r20
    17f8:	90 0d       	add	r25, r0
    17fa:	a4 9f       	mul	r26, r20
    17fc:	80 0d       	add	r24, r0
    17fe:	91 1d       	adc	r25, r1
    1800:	11 24       	eor	r1, r1
    1802:	08 95       	ret

00001804 <__prologue_saves__>:
    1804:	2f 92       	push	r2
    1806:	3f 92       	push	r3
    1808:	4f 92       	push	r4
    180a:	5f 92       	push	r5
    180c:	6f 92       	push	r6
    180e:	7f 92       	push	r7
    1810:	8f 92       	push	r8
    1812:	9f 92       	push	r9
    1814:	af 92       	push	r10
    1816:	bf 92       	push	r11
    1818:	cf 92       	push	r12
    181a:	df 92       	push	r13
    181c:	ef 92       	push	r14
    181e:	ff 92       	push	r15
    1820:	0f 93       	push	r16
    1822:	1f 93       	push	r17
    1824:	cf 93       	push	r28
    1826:	df 93       	push	r29
    1828:	cd b7       	in	r28, 0x3d	; 61
    182a:	de b7       	in	r29, 0x3e	; 62
    182c:	ca 1b       	sub	r28, r26
    182e:	db 0b       	sbc	r29, r27
    1830:	0f b6       	in	r0, 0x3f	; 63
    1832:	f8 94       	cli
    1834:	de bf       	out	0x3e, r29	; 62
    1836:	0f be       	out	0x3f, r0	; 63
    1838:	cd bf       	out	0x3d, r28	; 61
    183a:	09 94       	ijmp

0000183c <__epilogue_restores__>:
    183c:	2a 88       	ldd	r2, Y+18	; 0x12
    183e:	39 88       	ldd	r3, Y+17	; 0x11
    1840:	48 88       	ldd	r4, Y+16	; 0x10
    1842:	5f 84       	ldd	r5, Y+15	; 0x0f
    1844:	6e 84       	ldd	r6, Y+14	; 0x0e
    1846:	7d 84       	ldd	r7, Y+13	; 0x0d
    1848:	8c 84       	ldd	r8, Y+12	; 0x0c
    184a:	9b 84       	ldd	r9, Y+11	; 0x0b
    184c:	aa 84       	ldd	r10, Y+10	; 0x0a
    184e:	b9 84       	ldd	r11, Y+9	; 0x09
    1850:	c8 84       	ldd	r12, Y+8	; 0x08
    1852:	df 80       	ldd	r13, Y+7	; 0x07
    1854:	ee 80       	ldd	r14, Y+6	; 0x06
    1856:	fd 80       	ldd	r15, Y+5	; 0x05
    1858:	0c 81       	ldd	r16, Y+4	; 0x04
    185a:	1b 81       	ldd	r17, Y+3	; 0x03
    185c:	aa 81       	ldd	r26, Y+2	; 0x02
    185e:	b9 81       	ldd	r27, Y+1	; 0x01
    1860:	ce 0f       	add	r28, r30
    1862:	d1 1d       	adc	r29, r1
    1864:	0f b6       	in	r0, 0x3f	; 63
    1866:	f8 94       	cli
    1868:	de bf       	out	0x3e, r29	; 62
    186a:	0f be       	out	0x3f, r0	; 63
    186c:	cd bf       	out	0x3d, r28	; 61
    186e:	ed 01       	movw	r28, r26
    1870:	08 95       	ret

00001872 <__umulhisi3>:
    1872:	a2 9f       	mul	r26, r18
    1874:	b0 01       	movw	r22, r0
    1876:	b3 9f       	mul	r27, r19
    1878:	c0 01       	movw	r24, r0
    187a:	a3 9f       	mul	r26, r19
    187c:	70 0d       	add	r23, r0
    187e:	81 1d       	adc	r24, r1
    1880:	11 24       	eor	r1, r1
    1882:	91 1d       	adc	r25, r1
    1884:	b2 9f       	mul	r27, r18
    1886:	70 0d       	add	r23, r0
    1888:	81 1d       	adc	r24, r1
    188a:	11 24       	eor	r1, r1
    188c:	91 1d       	adc	r25, r1
    188e:	08 95       	ret

00001890 <_exit>:
    1890:	f8 94       	cli

00001892 <__stop_program>:
    1892:	ff cf       	rjmp	.-2      	; 0x1892 <__stop_program>
